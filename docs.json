{
  "/NTgCalls/Advanced Methods/Add Incoming Video.xml": {
    "title": "Add Incoming Video",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows to notify the library that an incoming video stream is available.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\nendpoint = ...\nssrc_groups = ...\n\nawait app.add_incoming_video(\n    -1001185324811,\n    endpoint,\n    ssrc_groups,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "endpoint",
              "type": "str",
              "description": " Endpoint ID",
              "source_config": null,
              "value": null
            },
            {
              "name": "ssrc_groups",
              "type": "list[ntgcalls.SsrcGroup]",
              "description": " SSRC groups for the video stream.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.add_incoming_video() -> int"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/Add Incoming Video"
  },
  "/NTgCalls/Advanced Methods/Get Connection Mode.xml": {
    "title": "Get Connection Mode",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows getting the connection mode for a Group Call connection, which can be RTMP, WebRTC, or MTProto.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\nmode = await app.get_connection_mode(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.get_connection_mode() -> ntgcalls.ConnectionMode"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/Get Connection Mode"
  },
  "/NTgCalls/Advanced Methods/Get State.xml": {
    "title": "Get State",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows retrieving GroupCall MTProto Configurations for EditGroupCallParticipant.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nstate = app.get_state(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "get_state() -> ntgcalls.MediaState"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/Get State"
  },
  "/NTgCalls/Advanced Methods/Remove Incoming Video.xml": {
    "title": "Remove Incoming Video",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows to notify the library that an incoming video stream is no longer available.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\nendpoint = ...\n\nawait app.remove_incoming_video(\n    -1001185324811,\n    endpoint,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "endpoint",
              "type": "str",
              "description": " Endpoint ID",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.remove_incoming_video()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/Remove Incoming Video"
  },
  "/NTgCalls/Advanced Methods/Send Broadcast Part.xml": {
    "title": "Send Broadcast Part",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows sending a broadcast stream part to the MTProto connection, obtained from GetFile by using the InputGroupCallStream constructor.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\nfrom ntgcalls import MediaSegmentStatus\n...\n\napp = NTgCalls()\n...\nframe_data = ...\n\nawait app.send_broadcast_part(\n    -1001185324811,\n    1234567,\n    1,\n    MediaSegmentStatus.SUCCESS,\n    False,\n    frame_data,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "segment_id",
              "type": "int",
              "description": " Unique identifier of the broadcast segment.",
              "source_config": null,
              "value": null
            },
            {
              "name": "part_id",
              "type": "int",
              "description": " Unique identifier of the broadcast part.",
              "source_config": null,
              "value": null
            },
            {
              "name": "status",
              "type": "MediaSegmentStatus",
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "quality_update",
              "type": "bool",
              "description": " Indicates if it is a quality update.",
              "source_config": null,
              "value": null
            },
            {
              "name": "frame",
              "type": "bytes",
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found. exception ntgcalls.RTCException\nThis error indicates that the MTProto connection is not established or has been closed.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.send_broadcast_part()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/Send Broadcast Part"
  },
  "/NTgCalls/Advanced Methods/Send Broadcast Timestamp.xml": {
    "title": "Send Broadcast Timestamp",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows sending a broadcast timestamp to the MTProto connection, obtained from GetGroupCallStreamChannels.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\nawait app.send_broadcast_timestamp(\n    -1001185324811,\n    1700000000,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "timestamp",
              "type": "int",
              "description": " Last seen timestamp to easily start fetching livestream chunks using InputGroupCallStream",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found. exception ntgcalls.RTCException\nThis error indicates that the MTProto connection is not established or has been closed.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.send_broadcast_timestamp()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/Send Broadcast Timestamp"
  },
  "/NTgCalls/Advanced Methods/Send External Frame.xml": {
    "title": "Send External Frame",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows sending an external video frame to the WebRTC connection.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\nfrom ntgcalls import StreamDevice\nfrom ntgcalls import FrameData\nfrom datetime import datetime\n...\n\napp = NTgCalls()\n...\npcm16_le_data = ...\n\nawait app.send_external_frame(\n    -1001185324811,\n    StreamDevice.MICROPHONE,\n    pcm16_le_data,\n    FrameData(\n        int(datetime.now().timestamp()),\n        0,\n        0,\n        0,\n    )\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "device",
              "type": "ntgcalls.StreamDevice",
              "description": " Device Kind",
              "source_config": null,
              "value": null
            },
            {
              "name": "frame",
              "type": "bytes",
              "description": " Frame buffer",
              "source_config": null,
              "value": null
            },
            {
              "name": "frame_data",
              "type": "ntgcalls.FrameData",
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.send_external_frame()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/Send External Frame"
  },
  "/NTgCalls/Advanced Methods/Send Signaling Data.xml": {
    "title": "Send Signaling Data",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows sending signaling data to the WebRTC connection.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nawait app.send_signaling_data(\n    -1001185324811,\n    \"data\",\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "data",
              "type": "bytes",
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.send_signaling_data()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/Send Signaling Data"
  },
  "/NTgCalls/Advanced Methods/ntg_add_incoming_video.xml": {
    "title": "ntg_add_incoming_video",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows to notify the library that an incoming video stream is available.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    char* endpoint = ...; // Obtain the endpoint of the incoming video\n    ntg_ssrc_group_struct* ssrcGroups = ...; // Obtain the SSRC groups of the incoming video\n    int size = ...; // Obtain the size of the SSRC groups array\n    uint32_t ssrc_buffer;\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_add_incoming_video(ptr, chatID, endpoint, ssrcGroups, &ssrc_buffer, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "char* endpoint",
              "type": null,
              "description": " Endpoint ID",
              "source_config": null,
              "value": null
            },
            {
              "name": "ntg_ssrc_group_struct* ssrcGroups",
              "type": null,
              "description": " SSRC groups for the video stream.",
              "source_config": null,
              "value": null
            },
            {
              "name": "int size",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "uint32_t* buffer",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_add_incoming_video()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_add_incoming_video"
  },
  "/NTgCalls/Advanced Methods/ntg_calls.xml": {
    "title": "ntg_calls",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This function returns a list of",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int size;\n    ntg_call_struct* buffer;\n    // Initialize the async struct\n    ntg_async_struct future;\n    int result = ntg_calls(ptr, &buffer, &size, &future);\n    // Wait for the async operation to complete\n    for (int i = 0; i < result; i++) {\n        printf(\"Group Call %d:\\n\", i + 1);\n        printf(\"  Chat ID: %lld\\n\", buffer[i].chatId);\n        printf(\"  Status: %d\\n\", buffer[i].status);\n    }\n    ... // Your Code Here\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_call_struct** buffer",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "int* size",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_calls()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_calls"
  },
  "/NTgCalls/Advanced Methods/ntg_cpu_usage.xml": {
    "title": "ntg_cpu_usage",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "Get an estimate of the CPU usage of the current process.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    double buffer;\n    // Initialize the async struct\n    ntg_async_struct future;\n    int64_t usage = ntg_cpu_usage(ptr, &buffer, &future);\n    // Wait for the async operation to complete and use\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "double* cpuUsage",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_cpu_usage()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_cpu_usage"
  },
  "/NTgCalls/Advanced Methods/ntg_enable_g_lib_loop.xml": {
    "title": "ntg_enable_g_lib_loop",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "Enable the GLib main loop to allow the library to use it for PipeWire on OSes that uses Wayland.",
    "example": {
      "language": "cpp",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    ...\n    ntg_enable_g_lib_loop(true);\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "bool enable",
              "type": null,
              "description": " Enable or disable the GLib main loop.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_enable_g_lib_loop()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_enable_g_lib_loop"
  },
  "/NTgCalls/Advanced Methods/ntg_get_connection_mode.xml": {
    "title": "ntg_get_connection_mode",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows getting the connection mode for a Group Call connection, which can be RTMP, WebRTC, or MTProto.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_connection_mode_enum buffer;\n    ntg_async_struct future;\n    ntg_get_connection_mode(ptr, chatID, &buffer, &future);\n    ...\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_connection_mode_enum* connectionMode",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_get_connection_mode()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_get_connection_mode"
  },
  "/NTgCalls/Advanced Methods/ntg_get_media_devices.xml": {
    "title": "ntg_get_media_devices",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows getting all the available media devices, such as microphones and cameras.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    ...\n    ntg_media_devices_struct devices;\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_get_media_devices(&devices, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "ntg_media_devices_struct* buffer",
              "type": null,
              "description": " Media devices available for streaming. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_get_media_devices()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_get_media_devices"
  },
  "/NTgCalls/Advanced Methods/ntg_get_protocol.xml": {
    "title": "ntg_get_protocol",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows getting the protocol for a Private Call connection with the output params for Telegram constructor PhoneCallProtocol.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_protocol_struct buffer;\n    ntg_get_protocol(ptr, chatID, &buffer);\n    ...\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_protocol_struct* protocol",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_get_protocol()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_get_protocol"
  },
  "/NTgCalls/Advanced Methods/ntg_get_state.xml": {
    "title": "ntg_get_state",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows retrieving GroupCall MTProto Configurations for EditGroupCallParticipant.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_media_state_struct buffer;\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_get_state(ptr, chatID, &buffer, &future);\n    // Wait for the async operation to complete and use\n    // the buffer for EditGroupCallParticipant\n    ...\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_media_state_struct* mediaState",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_get_state()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_get_state"
  },
  "/NTgCalls/Advanced Methods/ntg_remove_incoming_video.xml": {
    "title": "ntg_remove_incoming_video",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows to notify the library that an incoming video stream is no longer available.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    char* endpoint = ...; // Obtain the endpoint of the incoming video\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_remove_incoming_video(ptr, chatID, endpoint, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "char* endpoint",
              "type": null,
              "description": " Endpoint ID ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_remove_incoming_video()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_remove_incoming_video"
  },
  "/NTgCalls/Advanced Methods/ntg_send_broadcast_part.xml": {
    "title": "ntg_send_broadcast_part",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows sending a broadcast stream part to the MTProto connection, obtained from GetFile by using the InputGroupCallStream constructor.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    int64_t segmentId = ...; // Obtain the segment ID\n    int32_t partId = ...; // Obtain the part ID\n    bool qualityUpdate = ...; // Obtain the quality update flag\n    uint8_t* frame = ...; // Obtain the frame data\n    int size = ...; // Obtain the size of the frame data\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_send_broadcast_part(ptr, chatID, segmentId, partId, NTG_MEDIA_SEGMENT_SUCCESS, qualityUpdate, frame, size, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "int64_t segment_id",
              "type": null,
              "description": " Unique identifier of the broadcast segment.",
              "source_config": null,
              "value": null
            },
            {
              "name": "int32_t part_id",
              "type": null,
              "description": " Unique identifier of the broadcast part.",
              "source_config": null,
              "value": null
            },
            {
              "name": "ntg_media_segment_status_enum status",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "bool quality_update",
              "type": null,
              "description": " Indicates if it is a quality update.",
              "source_config": null,
              "value": null
            },
            {
              "name": "uint8_t* frame",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "int size",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found. #NTG_ERROR_WEBRTC -304\nThis error indicates that the MTProto connection is not established or has been closed.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_send_broadcast_part()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_send_broadcast_part"
  },
  "/NTgCalls/Advanced Methods/ntg_send_broadcast_timestamp.xml": {
    "title": "ntg_send_broadcast_timestamp",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows sending a broadcast timestamp to the MTProto connection, obtained from GetGroupCallStreamChannels.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    int64_t timestamp = ...; // Obtain the timestamp\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_send_broadcast_timestamp(ptr, chatID, timestamp, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "int64_t timestamp",
              "type": null,
              "description": " Last seen timestamp to easily start fetching livestream chunks using InputGroupCallStream ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found. #NTG_ERROR_WEBRTC -304\nThis error indicates that the MTProto connection is not established or has been closed.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_send_broadcast_timestamp()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_send_broadcast_timestamp"
  },
  "/NTgCalls/Advanced Methods/ntg_send_external_frame.xml": {
    "title": "ntg_send_external_frame",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows sending an external video frame to the WebRTC connection.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    uint8_t* pcm16_le_data = ...; // Obtain the PCM16 LE data\n    int size = ...; // Obtain the size of the PCM16 LE data\n    ntg_frame_data frame_data = {\n        .timestamp = ..., // Obtain the timestamp\n        .flags = 0,\n        .rotation = 0,\n        .layer = 0,\n    };\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_send_external_frame(ptr, chatID, NTG_STREAM_DEVICE_MICROPHONE, pcm16_le_data, size, &frame_data, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_stream_device_enum device",
              "type": null,
              "description": " Device Kind",
              "source_config": null,
              "value": null
            },
            {
              "name": "uint8_t* frame",
              "type": null,
              "description": " Frame buffer",
              "source_config": null,
              "value": null
            },
            {
              "name": "int size",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "ntg_frame_data_struct* frame_data",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_send_external_frame()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_send_external_frame"
  },
  "/NTgCalls/Advanced Methods/ntg_send_signaling_data.xml": {
    "title": "ntg_send_signaling_data",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows sending signaling data to the WebRTC connection.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    uint8_t* buffer = ...; // Obtain the signaling data\n    int size = ...; // Obtain the size of the signaling data\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_send_signaling_data(ptr, chatID, buffer, size, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "uint8_t* data",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "int size",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_send_signaling_data()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Advanced Methods/ntg_send_signaling_data"
  },
  "/NTgCalls/Available Enums/ConnectionKind.xml": {
    "title": "ConnectionKind",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Kind of connection.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.ConnectionKind",
      "members": [
        {
          "name": "NORMAL",
          "type": null,
          "description": "Normal connection for the camera and microphone.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "PRESENTATION",
          "type": null,
          "description": "Presentation connection for sharing the screen and system audio.",
          "source_config": null,
          "value": "1"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ConnectionKind"
  },
  "/NTgCalls/Available Enums/ConnectionMode.xml": {
    "title": "ConnectionMode",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Connection mode for a Group Call connection.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.ConnectionMode",
      "members": [
        {
          "name": "RTC",
          "type": null,
          "description": "Indicates that the connection mode is WebRTC.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "STREAM",
          "type": null,
          "description": "Indicates that the connection mode is MTProto.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "RTMP",
          "type": null,
          "description": "Indicates that the connection mode is RTMP.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ConnectionMode"
  },
  "/NTgCalls/Available Enums/ConnectionState.xml": {
    "title": "ConnectionState",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of connection state values.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.ConnectionState",
      "members": [
        {
          "name": "CONNECTING",
          "type": null,
          "description": "Indicates that the connection is in the process of being established.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "CONNECTED",
          "type": null,
          "description": "Indicates that the connection has been established.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "FAILED",
          "type": null,
          "description": "Indicates that the connection has failed.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "TIMEOUT",
          "type": null,
          "description": "Indicates that the connection has timed out.",
          "source_config": null,
          "value": "3"
        },
        {
          "name": "CLOSED",
          "type": null,
          "description": "Indicates that the connection has been closed.",
          "source_config": null,
          "value": "4"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ConnectionState"
  },
  "/NTgCalls/Available Enums/MediaSegmentQuality.xml": {
    "title": "MediaSegmentQuality",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Quality of the media segment for the broadcast stream.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.MediaSegmentQuality",
      "members": [
        {
          "name": "NONE",
          "type": null,
          "description": "Indicates that the media segment has no quality.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "THUMBNAIL",
          "type": null,
          "description": "Indicates that the media segment is a thumbnail.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "MEDIUM",
          "type": null,
          "description": "Indicates that the media segment is of medium quality.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "FULL",
          "type": null,
          "description": "Indicates that the media segment is of full quality.",
          "source_config": null,
          "value": "3"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/MediaSegmentQuality"
  },
  "/NTgCalls/Available Enums/MediaSegmentStatus.xml": {
    "title": "MediaSegmentStatus",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Media segment status for the broadcast stream.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.MediaSegmentStatus",
      "members": [
        {
          "name": "NOT_READY",
          "type": null,
          "description": "Indicates that the media segment is not ready, like when getting any kind of errors except for FloodWaits.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "RESYNC_NEEDED",
          "type": null,
          "description": "Indicates that the media segment needs to be resynced, like when getting FloodWait errors.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "SUCCESS",
          "type": null,
          "description": "Indicates that the media segment is ready.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/MediaSegmentStatus"
  },
  "/NTgCalls/Available Enums/MediaSource.xml": {
    "title": "MediaSource",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of input modes for audio and video streams.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.MediaSource",
      "members": [
        {
          "name": "FILE",
          "type": null,
          "description": "Input mode using a file source.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "SHELL",
          "type": null,
          "description": "Input mode using a shell command.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "FFMPEG",
          "type": null,
          "description": "Input mode using FFmpeg.",
          "source_config": null,
          "value": "4"
        },
        {
          "name": "DEVICE",
          "type": null,
          "description": "Input mode using a device source.",
          "source_config": null,
          "value": "8"
        },
        {
          "name": "DESKTOP",
          "type": null,
          "description": "Input mode using a desktop source.",
          "source_config": null,
          "value": "16"
        },
        {
          "name": "EXTERNAL",
          "type": null,
          "description": "Input mode using an external source.",
          "source_config": null,
          "value": "32"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/MediaSource"
  },
  "/NTgCalls/Available Enums/StreamDevice.xml": {
    "title": "StreamDevice",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of stream device values.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.StreamDevice",
      "members": [
        {
          "name": "MICROPHONE",
          "type": null,
          "description": "Input mode using a microphone source.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "SPEAKER",
          "type": null,
          "description": "Input mode using a speaker source.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "CAMERA",
          "type": null,
          "description": "Input mode using a camera source.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "SCREEN",
          "type": null,
          "description": "Input mode using a screen source.",
          "source_config": null,
          "value": "3"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/StreamDevice"
  },
  "/NTgCalls/Available Enums/StreamMode.xml": {
    "title": "StreamMode",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Stream direction for the stream.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.StreamMode",
      "members": [
        {
          "name": "CAPTURE",
          "type": null,
          "description": "Direction for sending the stream.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "PLAYBACK",
          "type": null,
          "description": "Direction for receiving the stream.",
          "source_config": null,
          "value": "1"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/StreamMode"
  },
  "/NTgCalls/Available Enums/StreamStatus.xml": {
    "title": "StreamStatus",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of stream status values.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.StreamStatus",
      "members": [
        {
          "name": "PLAYING",
          "type": null,
          "description": "Indicates that the stream is currently playing.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "PAUSED",
          "type": null,
          "description": "Indicates that the stream is currently paused.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "IDLING",
          "type": null,
          "description": "Indicates that the stream is currently idling (neither playing nor paused).",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/StreamStatus"
  },
  "/NTgCalls/Available Enums/StreamType.xml": {
    "title": "StreamType",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of stream type values.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.StreamType",
      "members": [
        {
          "name": "AUDIO",
          "type": null,
          "description": "Indicates that the stream type is audio.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "VIDEO",
          "type": null,
          "description": "Indicates that the stream type is video.",
          "source_config": null,
          "value": "1"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/StreamType"
  },
  "/NTgCalls/Available Enums/ntg_connection_kind_enum.xml": {
    "title": "ntg_connection_kind_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Kind of connection.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_connection_kind_enum",
      "members": [
        {
          "name": "NTG_KIND_NORMAL",
          "type": null,
          "description": "Normal connection for the camera and microphone.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_KIND_PRESENTATION",
          "type": null,
          "description": "Presentation connection for sharing the screen and system audio.",
          "source_config": null,
          "value": "1"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_connection_kind_enum"
  },
  "/NTgCalls/Available Enums/ntg_connection_mode_enum.xml": {
    "title": "ntg_connection_mode_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Connection mode for a Group Call connection.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_connection_mode_enum",
      "members": [
        {
          "name": "NTG_CONNECTION_MODE_RTC",
          "type": null,
          "description": "Indicates that the connection mode is WebRTC.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_CONNECTION_MODE_STREAM",
          "type": null,
          "description": "Indicates that the connection mode is MTProto.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_CONNECTION_MODE_RTMP",
          "type": null,
          "description": "Indicates that the connection mode is RTMP.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_connection_mode_enum"
  },
  "/NTgCalls/Available Enums/ntg_connection_state_enum.xml": {
    "title": "ntg_connection_state_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of connection state values.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_connection_state_enum",
      "members": [
        {
          "name": "NTG_STATE_CONNECTING",
          "type": null,
          "description": "Indicates that the connection is in the process of being established.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_STATE_CONNECTED",
          "type": null,
          "description": "Indicates that the connection has been established.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_STATE_FAILED",
          "type": null,
          "description": "Indicates that the connection has failed.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "NTG_STATE_TIMEOUT",
          "type": null,
          "description": "Indicates that the connection has timed out.",
          "source_config": null,
          "value": "3"
        },
        {
          "name": "NTG_STATE_CLOSED",
          "type": null,
          "description": "Indicates that the connection has been closed.",
          "source_config": null,
          "value": "4"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_connection_state_enum"
  },
  "/NTgCalls/Available Enums/ntg_log_level_enum.xml": {
    "title": "ntg_log_level_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Log level.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_log_level_enum",
      "members": [
        {
          "name": "NTG_LOG_DEBUG",
          "type": null,
          "description": "Debug log level.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_LOG_INFO",
          "type": null,
          "description": "Info log level.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "NTG_LOG_WARNING",
          "type": null,
          "description": "Warning log level.",
          "source_config": null,
          "value": "4"
        },
        {
          "name": "NTG_LOG_ERROR",
          "type": null,
          "description": "Error log level.",
          "source_config": null,
          "value": "8"
        },
        {
          "name": "NTG_LOG_UNKNOWN",
          "type": null,
          "description": "Unknown log level.",
          "source_config": null,
          "value": "-1"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_log_level_enum"
  },
  "/NTgCalls/Available Enums/ntg_log_source_enum.xml": {
    "title": "ntg_log_source_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Log source.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_log_source_enum",
      "members": [
        {
          "name": "NTG_LOG_WEBRTC",
          "type": null,
          "description": "WebRTC log level.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_LOG_SELF",
          "type": null,
          "description": "NTgCalls log level.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_log_source_enum"
  },
  "/NTgCalls/Available Enums/ntg_media_segment_quality_enum.xml": {
    "title": "ntg_media_segment_quality_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Quality of the media segment for the broadcast stream.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_media_segment_quality_enum",
      "members": [
        {
          "name": "NTG_MEDIA_SEGMENT_QUALITY_NONE",
          "type": null,
          "description": "Indicates that the media segment has no quality.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_MEDIA_SEGMENT_QUALITY_THUMBNAIL",
          "type": null,
          "description": "Indicates that the media segment is a thumbnail.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_MEDIA_SEGMENT_QUALITY_MEDIUM",
          "type": null,
          "description": "Indicates that the media segment is of medium quality.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "NTG_MEDIA_SEGMENT_QUALITY_FULL",
          "type": null,
          "description": "Indicates that the media segment is of full quality.",
          "source_config": null,
          "value": "3"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_media_segment_quality_enum"
  },
  "/NTgCalls/Available Enums/ntg_media_segment_status_enum.xml": {
    "title": "ntg_media_segment_status_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Media segment status for the broadcast stream.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_media_segment_status_enum",
      "members": [
        {
          "name": "NTG_MEDIA_SEGMENT_NOT_READY",
          "type": null,
          "description": "Indicates that the media segment is not ready, like when getting any kind of errors except for FloodWaits.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_MEDIA_SEGMENT_RESYNC_NEEDED",
          "type": null,
          "description": "Indicates that the media segment needs to be resynced, like when getting FloodWait errors.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_MEDIA_SEGMENT_SUCCESS",
          "type": null,
          "description": "Indicates that the media segment is ready.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_media_segment_status_enum"
  },
  "/NTgCalls/Available Enums/ntg_media_source_enum.xml": {
    "title": "ntg_media_source_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of input modes for audio and video streams.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_media_source_enum",
      "members": [
        {
          "name": "NTG_FILE",
          "type": null,
          "description": "Input mode using a file source.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_SHELL",
          "type": null,
          "description": "Input mode using a shell command.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "NTG_FFMPEG",
          "type": null,
          "description": "Input mode using FFmpeg.",
          "source_config": null,
          "value": "4"
        },
        {
          "name": "NTG_DEVICE",
          "type": null,
          "description": "Input mode using a device source.",
          "source_config": null,
          "value": "8"
        },
        {
          "name": "NTG_DESKTOP",
          "type": null,
          "description": "Input mode using a desktop source.",
          "source_config": null,
          "value": "16"
        },
        {
          "name": "NTG_EXTERNAL",
          "type": null,
          "description": "Input mode using an external source.",
          "source_config": null,
          "value": "32"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_media_source_enum"
  },
  "/NTgCalls/Available Enums/ntg_stream_device_enum.xml": {
    "title": "ntg_stream_device_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of stream device values.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_stream_device_enum",
      "members": [
        {
          "name": "NTG_STREAM_MICROPHONE",
          "type": null,
          "description": "Input mode using a microphone source.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_STREAM_SPEAKER",
          "type": null,
          "description": "Input mode using a speaker source.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_STREAM_CAMERA",
          "type": null,
          "description": "Input mode using a camera source.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "NTG_STREAM_SCREEN",
          "type": null,
          "description": "Input mode using a screen source.",
          "source_config": null,
          "value": "3"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_stream_device_enum"
  },
  "/NTgCalls/Available Enums/ntg_stream_mode_enum.xml": {
    "title": "ntg_stream_mode_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Stream direction for the stream.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_stream_mode_enum",
      "members": [
        {
          "name": "NTG_STREAM_CAPTURE",
          "type": null,
          "description": "Direction for sending the stream.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_STREAM_PLAYBACK",
          "type": null,
          "description": "Direction for receiving the stream.",
          "source_config": null,
          "value": "1"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_stream_mode_enum"
  },
  "/NTgCalls/Available Enums/ntg_stream_status_enum.xml": {
    "title": "ntg_stream_status_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of stream status values.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_stream_status_enum",
      "members": [
        {
          "name": "NTG_PLAYING",
          "type": null,
          "description": "Indicates that the stream is currently playing.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_PAUSED",
          "type": null,
          "description": "Indicates that the stream is currently paused.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "NTG_IDLING",
          "type": null,
          "description": "Indicates that the stream is currently idling (neither playing nor paused).",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_stream_status_enum"
  },
  "/NTgCalls/Available Enums/ntg_stream_type_enum.xml": {
    "title": "ntg_stream_type_enum",
    "lib": "NTgCalls",
    "kind": "enum",
    "description": "Enumeration of stream type values.",
    "example": {},
    "details": {
      "signature": "typedef enum ntg_stream_type_enum",
      "members": [
        {
          "name": "NTG_STREAM_AUDIO",
          "type": null,
          "description": "Indicates that the stream type is audio.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "NTG_STREAM_VIDEO",
          "type": null,
          "description": "Indicates that the stream type is video.",
          "source_config": null,
          "value": "1"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Enums/ntg_stream_type_enum"
  },
  "/NTgCalls/Available Structs/ntg_audio_description_struct.xml": {
    "title": "ntg_audio_description_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Stream’s Audio Configuration",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_audio_description_struct",
      "parameters": [
        {
          "name": "uint32_t sampleRate",
          "type": null,
          "description": "Audio sample rate (0-96000, max allowed by PCM16L).",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint8_t channelCount",
          "type": null,
          "description": "Audio channel count (1-2, max allowed by PCM16L).",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_audio_description_struct"
  },
  "/NTgCalls/Available Structs/ntg_auth_params_struct.xml": {
    "title": "ntg_auth_params_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Authentication parameters for the connection.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_auth_params_struct",
      "properties": [
        {
          "name": "uint8_t* g_a_or_b",
          "type": null,
          "description": "Parameter for key exchange.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizeGAB",
          "type": null,
          "description": "Size of the parameter for key exchange",
          "source_config": null,
          "value": null
        },
        {
          "name": "int64_t key_fingerprint",
          "type": null,
          "description": "Fingerprint for the connection.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_auth_params_struct"
  },
  "/NTgCalls/Available Structs/ntg_call_info_struct.xml": {
    "title": "ntg_call_info_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Call Descriptor for a Group Call or Private Call.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_call_info_struct",
      "properties": [
        {
          "name": "int64_t chatID",
          "type": null,
          "description": "Unique identifier of a chat.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_stream_status_enum playback",
          "type": "ntg_stream_status_enum",
          "description": "Playback stream status.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_stream_status_enum capture",
          "type": "ntg_stream_status_enum",
          "description": "Capture stream status.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_call_info_struct"
  },
  "/NTgCalls/Available Structs/ntg_device_info_struct.xml": {
    "title": "ntg_device_info_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Device Information.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_device_info_struct",
      "properties": [
        {
          "name": "char* name",
          "type": null,
          "description": "Device name.",
          "source_config": null,
          "value": null
        },
        {
          "name": "char* metadata",
          "type": null,
          "description": "Device metadata, such as the device ID.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_device_info_struct"
  },
  "/NTgCalls/Available Structs/ntg_dh_config_struct.xml": {
    "title": "ntg_dh_config_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Diffie-Hellman configuration for key exchange.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_dh_config_struct",
      "properties": [
        {
          "name": "int32_t g",
          "type": null,
          "description": "New value prime, see Wikipedia.",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint8_t* p",
          "type": null,
          "description": "New value primitive root, see Wikipedia.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizeP",
          "type": null,
          "description": "Size of the parameter for key exchange",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint8_t* random",
          "type": null,
          "description": "Random sequence of bytes of assigned length.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizeRandom",
          "type": null,
          "description": "Size of the random number",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_dh_config_struct"
  },
  "/NTgCalls/Available Structs/ntg_frame_data_struct.xml": {
    "title": "ntg_frame_data_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Frame data for the media stream.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_frame_data_struct",
      "parameters": [
        {
          "name": "int64_t absolute_capture_timestamp_ms",
          "type": null,
          "description": "Absolute capture timestamp in milliseconds.",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint16_t rotation",
          "type": null,
          "description": "Rotation of the video frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint16_t width",
          "type": null,
          "description": "Width of the video frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint16_t height",
          "type": null,
          "description": "Height of the video frame.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_frame_data_struct"
  },
  "/NTgCalls/Available Structs/ntg_frame_struct.xml": {
    "title": "ntg_frame_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Frame descriptor for the media stream.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_frame_struct",
      "properties": [
        {
          "name": "int64_t ssrc",
          "type": null,
          "description": "SSRC of the frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint8_t* data",
          "type": null,
          "description": "Frame buffer",
          "source_config": null,
          "value": null
        },
        {
          "name": "int size",
          "type": null,
          "description": "Size of the frame buffer",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_frame_data_struct frame_data",
          "type": "ntg_frame_data_struct",
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_frame_struct"
  },
  "/NTgCalls/Available Structs/ntg_log_message_struct.xml": {
    "title": "ntg_log_message_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Log message structure.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_log_message_struct",
      "properties": [
        {
          "name": "ntg_log_level_enum level",
          "type": "ntg_log_level_enum",
          "description": "",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_log_source_enum source",
          "type": "ntg_log_source_enum",
          "description": "",
          "source_config": null,
          "value": null
        },
        {
          "name": "char* file",
          "type": null,
          "description": "",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint32_t line",
          "type": null,
          "description": "",
          "source_config": null,
          "value": null
        },
        {
          "name": "char* message",
          "type": null,
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_log_message_struct"
  },
  "/NTgCalls/Available Structs/ntg_media_description_struct.xml": {
    "title": "ntg_media_description_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Media Configuration for the Stream.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_media_description_struct",
      "parameters": [
        {
          "name": "ntg_audio_description_struct* microphone",
          "type": null,
          "description": "Microphone configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_audio_description_struct* speaker",
          "type": null,
          "description": "Speaker configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_video_description_struct* camera",
          "type": null,
          "description": "Camera configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_video_description_struct* screen",
          "type": null,
          "description": "Screen configuration for the stream.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_media_description_struct"
  },
  "/NTgCalls/Available Structs/ntg_media_devices_struct.xml": {
    "title": "ntg_media_devices_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Media devices available for streaming.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_media_devices_struct",
      "properties": [
        {
          "name": "ntg_device_info_struct* microphone",
          "type": "ntg_device_info_struct",
          "description": "List of available microphones.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizeMicrophone",
          "type": null,
          "description": "Size of the microphone list",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_device_info_struct* speaker",
          "type": "ntg_device_info_struct",
          "description": "List of available speakers.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizeSpeaker",
          "type": null,
          "description": "Size of the speaker list",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_device_info_struct* camera",
          "type": "ntg_device_info_struct",
          "description": "List of available cameras.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizeCamera",
          "type": null,
          "description": "Size of the camera list",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_device_info_struct* screen",
          "type": "ntg_device_info_struct",
          "description": "List of available screens.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizeScreen",
          "type": null,
          "description": "Size of the screen list",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_media_devices_struct"
  },
  "/NTgCalls/Available Structs/ntg_media_state_struct.xml": {
    "title": "ntg_media_state_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "GroupCall MTProto Configurations.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_media_state_struct",
      "properties": [
        {
          "name": "bool muted",
          "type": null,
          "description": "Indicates whether the media stream is muted.",
          "source_config": null,
          "value": null
        },
        {
          "name": "bool videoPaused",
          "type": null,
          "description": "Indicates whether the video stream is paused.",
          "source_config": null,
          "value": null
        },
        {
          "name": "bool videoStopped",
          "type": null,
          "description": "Indicates whether the video stream is stopped.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_media_state_struct"
  },
  "/NTgCalls/Available Structs/ntg_network_info_struct.xml": {
    "title": "ntg_network_info_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Network status for the call.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_network_info_struct",
      "properties": [
        {
          "name": "ntg_connection_state_enum state",
          "type": "ntg_connection_state_enum",
          "description": "Connection state for the call.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_connection_kind_enum kind",
          "type": "ntg_connection_kind_enum",
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_network_info_struct"
  },
  "/NTgCalls/Available Structs/ntg_protocol_struct.xml": {
    "title": "ntg_protocol_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "When using RequestCall and AcceptCall, specify all library versions supported by the client. The server will merge and choose the best library version supported by both peers, returning only the best value in the result of the call's AcceptCall and in the PhoneCallAccepted update received by the caller.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_protocol_struct"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_protocol_struct"
  },
  "/NTgCalls/Available Structs/ntg_remote_source_struct.xml": {
    "title": "ntg_remote_source_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Remote source for the call.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_remote_source_struct",
      "properties": [
        {
          "name": "uint32_t ssrc",
          "type": null,
          "description": "SSRC of the frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_stream_status_enum state",
          "type": "ntg_stream_status_enum",
          "description": "Stream’s Status.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_stream_device_enum device",
          "type": "ntg_stream_device_enum",
          "description": "Stream’s Device.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_remote_source_struct"
  },
  "/NTgCalls/Available Structs/ntg_rtc_server_struct.xml": {
    "title": "ntg_rtc_server_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Identifies an endpoint that can be used to connect to the other user in a phone call.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_rtc_server_struct",
      "properties": [
        {
          "name": "uint64_t id",
          "type": null,
          "description": "Endpoint ID",
          "source_config": null,
          "value": null
        },
        {
          "name": "char* ipv4",
          "type": null,
          "description": "IPv4 address of endpoint",
          "source_config": null,
          "value": null
        },
        {
          "name": "char* ipv6",
          "type": null,
          "description": "IPv6 address of endpoint",
          "source_config": null,
          "value": null
        },
        {
          "name": "char* username",
          "type": null,
          "description": "Username of endpoint",
          "source_config": null,
          "value": null
        },
        {
          "name": "char* password",
          "type": null,
          "description": "Password of endpoint",
          "source_config": null,
          "value": null
        },
        {
          "name": "int port",
          "type": null,
          "description": "Port ID",
          "source_config": null,
          "value": null
        },
        {
          "name": "bool turn",
          "type": null,
          "description": "Whether the endpoint is a TURN server",
          "source_config": null,
          "value": null
        },
        {
          "name": "bool stun",
          "type": null,
          "description": "Whether the endpoint is a STUN server",
          "source_config": null,
          "value": null
        },
        {
          "name": "bool tcp",
          "type": null,
          "description": "Whether TCP should be used",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint8_t* peerTag",
          "type": null,
          "description": "Our peer tag",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizePeerTag",
          "type": null,
          "description": "Size of the peer tag",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_rtc_server_struct"
  },
  "/NTgCalls/Available Structs/ntg_segment_part_request_struct.xml": {
    "title": "ntg_segment_part_request_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "This constructor represents a request for a specific part of a broadcast stream segment.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_segment_part_request_struct",
      "properties": [
        {
          "name": "int segmentId",
          "type": null,
          "description": "Unique identifier of the broadcast segment.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int partId",
          "type": null,
          "description": "Unique identifier of the broadcast part.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int limit",
          "type": null,
          "description": "Number of bytes to be returned.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int timestamp",
          "type": null,
          "description": "Last seen timestamp to easily start fetching livestream chunks using InputGroupCallStream",
          "source_config": null,
          "value": null
        },
        {
          "name": "bool qualityUpdate",
          "type": null,
          "description": "Indicates if it is a quality update.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int channelId",
          "type": null,
          "description": "Selected video channel.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ntg_media_segment_quality_enum quality",
          "type": "ntg_media_segment_quality_enum",
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_segment_part_request_struct"
  },
  "/NTgCalls/Available Structs/ntg_ssrc_group_struct.xml": {
    "title": "ntg_ssrc_group_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "SSRC Group with the SSRCs of the video stream and the semantics.",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_ssrc_group_struct",
      "properties": [
        {
          "name": "char* semantics",
          "type": null,
          "description": "Enumeration of SSRC group semantics values.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int* ssrcs",
          "type": null,
          "description": "SSRC Group.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int sizeSsrcs",
          "type": null,
          "description": "Sizes of the ssrcs list",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_ssrc_group_struct"
  },
  "/NTgCalls/Available Structs/ntg_video_description_struct.xml": {
    "title": "ntg_video_description_struct",
    "lib": "NTgCalls",
    "kind": "struct",
    "description": "Stream’s Video Configuration",
    "example": {},
    "details": {
      "signature": "typedef struct ntg_video_description_struct",
      "parameters": [
        {
          "name": "int16_t width",
          "type": null,
          "description": "Video width in pixels.",
          "source_config": null,
          "value": null
        },
        {
          "name": "int16_t height",
          "type": null,
          "description": "Video height in pixels.",
          "source_config": null,
          "value": null
        },
        {
          "name": "uint8_t fps",
          "type": null,
          "description": "Frames per second (FPS) for video playback.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Structs/ntg_video_description_struct"
  },
  "/NTgCalls/Available Types/AudioDescription.xml": {
    "title": "AudioDescription",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Stream’s Audio Configuration",
    "example": {},
    "details": {
      "signature": "class ntgcalls.AudioDescription",
      "parameters": [
        {
          "name": "sample_rate",
          "type": "int",
          "description": "Audio sample rate (0-96000, max allowed by PCM16L).",
          "source_config": null,
          "value": null
        },
        {
          "name": "channel_count",
          "type": "int",
          "description": "Audio channel count (1-2, max allowed by PCM16L). input: str\nThe input media source.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/AudioDescription"
  },
  "/NTgCalls/Available Types/AuthParams.xml": {
    "title": "AuthParams",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Authentication parameters for the connection.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.AuthParams",
      "properties": [
        {
          "name": "g_a_or_b",
          "type": "bytes",
          "description": "Parameter for key exchange.",
          "source_config": null,
          "value": null
        },
        {
          "name": "key_fingerprint",
          "type": "int",
          "description": "Fingerprint for the connection.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/AuthParams"
  },
  "/NTgCalls/Available Types/CallInfo.xml": {
    "title": "MediaInfo",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Call Descriptor for a Group Call or Private Call.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.CallInfo",
      "properties": [
        {
          "name": "playback",
          "type": "ntgcalls.StreamStatus",
          "description": "Playback stream status.",
          "source_config": null,
          "value": null
        },
        {
          "name": "capture",
          "type": "ntgcalls.StreamStatus",
          "description": "Capture stream status.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/CallInfo"
  },
  "/NTgCalls/Available Types/DeviceInfo.xml": {
    "title": "DeviceInfo",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Device Information.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.DeviceInfo",
      "properties": [
        {
          "name": "name",
          "type": "str",
          "description": "Device name.",
          "source_config": null,
          "value": null
        },
        {
          "name": "metadata",
          "type": "str",
          "description": "Device metadata, such as the device ID.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/DeviceInfo"
  },
  "/NTgCalls/Available Types/DhConfig.xml": {
    "title": "DhConfig",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Diffie-Hellman configuration for key exchange.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.DhConfig",
      "parameters": [
        {
          "name": "g",
          "type": "int",
          "description": "New value prime, see Wikipedia.",
          "source_config": null,
          "value": null
        },
        {
          "name": "p",
          "type": "bytes",
          "description": "New value primitive root, see Wikipedia.",
          "source_config": null,
          "value": null
        },
        {
          "name": "random",
          "type": "bytes",
          "description": "Random sequence of bytes of assigned length.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/DhConfig"
  },
  "/NTgCalls/Available Types/Frame.xml": {
    "title": "Frame",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Frame descriptor for the media stream.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.Frame",
      "parameters": [
        {
          "name": "ssrc",
          "type": "int",
          "description": "SSRC of the frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "data",
          "type": "bytes",
          "description": "Frame buffer",
          "source_config": null,
          "value": null
        },
        {
          "name": "frame_data",
          "type": "ntgcalls.FrameData",
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/Frame"
  },
  "/NTgCalls/Available Types/FrameData.xml": {
    "title": "FrameData",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Frame data for the media stream.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.FrameData",
      "parameters": [
        {
          "name": "absolute_capture_timestamp_ms",
          "type": "int",
          "description": "Absolute capture timestamp in milliseconds.",
          "source_config": null,
          "value": null
        },
        {
          "name": "rotation",
          "type": "int",
          "description": "Rotation of the video frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "width",
          "type": "int",
          "description": "Width of the video frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "height",
          "type": "int",
          "description": "Height of the video frame.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/FrameData"
  },
  "/NTgCalls/Available Types/MediaDescription.xml": {
    "title": "MediaDescription",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Media Configuration for the Stream.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.MediaDescription",
      "parameters": [
        {
          "name": "microphone",
          "type": "Optional[ntgcalls.AudioDescription]",
          "description": "Microphone configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "speaker",
          "type": "Optional[ntgcalls.AudioDescription]",
          "description": "Speaker configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "camera",
          "type": "Optional[ntgcalls.VideoDescription]",
          "description": "Camera configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "screen",
          "type": "Optional[ntgcalls.VideoDescription]",
          "description": "Screen configuration for the stream.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/MediaDescription"
  },
  "/NTgCalls/Available Types/MediaDevices.xml": {
    "title": "Media Devices",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Media devices available for streaming.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.MediaDevices",
      "properties": [
        {
          "name": "microphone",
          "type": "list[ntgcalls.DeviceInfo]",
          "description": "List of available microphones.",
          "source_config": null,
          "value": null
        },
        {
          "name": "speaker",
          "type": "list[ntgcalls.DeviceInfo]",
          "description": "List of available speakers.",
          "source_config": null,
          "value": null
        },
        {
          "name": "camera",
          "type": "list[ntgcalls.DeviceInfo]",
          "description": "List of available cameras.",
          "source_config": null,
          "value": null
        },
        {
          "name": "screen",
          "type": "list[ntgcalls.DeviceInfo]",
          "description": "List of available screens.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/MediaDevices"
  },
  "/NTgCalls/Available Types/MediaState.xml": {
    "title": "MediaState",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "GroupCall MTProto Configurations.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.MediaState",
      "properties": [
        {
          "name": "muted",
          "type": "bool",
          "description": "Indicates whether the media stream is muted.",
          "source_config": null,
          "value": null
        },
        {
          "name": "video_paused",
          "type": "bool",
          "description": "Indicates whether the video stream is paused.",
          "source_config": null,
          "value": null
        },
        {
          "name": "video_stopped",
          "type": "bool",
          "description": "Indicates whether the video stream is stopped.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/MediaState"
  },
  "/NTgCalls/Available Types/NetworkInfo.xml": {
    "title": "NetworkInfo",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Network status for the call.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.NetworkInfo",
      "properties": [
        {
          "name": "state",
          "type": "ntgcalls.ConnectionState",
          "description": "Connection state for the call.",
          "source_config": null,
          "value": null
        },
        {
          "name": "kind",
          "type": "ntgcalls.ConnectionKind",
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/NetworkInfo"
  },
  "/NTgCalls/Available Types/Protocol.xml": {
    "title": "Protocol",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Protocol for a Private Call connection.",
    "example": {},
    "details": {
      "signature": "class Protocol",
      "properties": [
        {
          "name": "min_layer",
          "type": "int",
          "description": "Minimum layer for remote connection.",
          "source_config": null,
          "value": null
        },
        {
          "name": "max_layer",
          "type": "int",
          "description": "Maximum layer for remote connection.",
          "source_config": null,
          "value": null
        },
        {
          "name": "udp_p2p",
          "type": "bool",
          "description": "Whether to allow P2P connection to the other participant.",
          "source_config": null,
          "value": null
        },
        {
          "name": "udp_reflector",
          "type": "bool",
          "description": "Whether to allow connection to the other participants through the reflector servers.",
          "source_config": null,
          "value": null
        },
        {
          "name": "library_versions",
          "type": "list[str]",
          "description": "When using RequestCall and AcceptCall,\n        specify all library versions supported by the client.\n        The server will merge and choose the best library version supported by both peers, returning only the best\n        value in the result of the call's AcceptCall and in the PhoneCallAccepted update received by the caller.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/Protocol"
  },
  "/NTgCalls/Available Types/RTCServer.xml": {
    "title": "RTCServer",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Identifies an endpoint that can be used to connect to the other user in a phone call.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.RTCServer",
      "parameters": [
        {
          "name": "id",
          "type": "int",
          "description": "Endpoint ID",
          "source_config": null,
          "value": null
        },
        {
          "name": "ipv4",
          "type": "str",
          "description": "IPv4 address of endpoint",
          "source_config": null,
          "value": null
        },
        {
          "name": "ipv6",
          "type": "str",
          "description": "IPv6 address of endpoint",
          "source_config": null,
          "value": null
        },
        {
          "name": "username",
          "type": "Optional[str]",
          "description": "Username of endpoint",
          "source_config": null,
          "value": null
        },
        {
          "name": "password",
          "type": "Optional[str]",
          "description": "Password of endpoint",
          "source_config": null,
          "value": null
        },
        {
          "name": "port",
          "type": "int",
          "description": "Port ID",
          "source_config": null,
          "value": null
        },
        {
          "name": "turn",
          "type": "bool",
          "description": "Whether the endpoint is a TURN server",
          "source_config": null,
          "value": null
        },
        {
          "name": "stun",
          "type": "bool",
          "description": "Whether the endpoint is a STUN server",
          "source_config": null,
          "value": null
        },
        {
          "name": "tcp",
          "type": "bool",
          "description": "Whether TCP should be used",
          "source_config": null,
          "value": null
        },
        {
          "name": "peer_tag",
          "type": "Optional[bytes]",
          "description": "Our peer tag",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/RTCServer"
  },
  "/NTgCalls/Available Types/RemoteSource.xml": {
    "title": "RemoteSource",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Remote source for the call.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.RemoteSource",
      "properties": [
        {
          "name": "ssrc",
          "type": "int",
          "description": "SSRC of the frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "state",
          "type": "ntgcalls.StreamStatus",
          "description": "Stream’s Status.",
          "source_config": null,
          "value": null
        },
        {
          "name": "device",
          "type": "ntgcalls.StreamDevice",
          "description": "Stream’s Device.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/RemoteSource"
  },
  "/NTgCalls/Available Types/SegmentPartRequest.xml": {
    "title": "SegmentPartRequest",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "This constructor represents a request for a specific part of a broadcast stream segment.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.SegmentPartRequest",
      "parameters": [
        {
          "name": "segment_id",
          "type": "int",
          "description": "Unique identifier of the broadcast segment.",
          "source_config": null,
          "value": null
        },
        {
          "name": "part_id",
          "type": "int",
          "description": "Unique identifier of the broadcast part.",
          "source_config": null,
          "value": null
        },
        {
          "name": "limit",
          "type": "int",
          "description": "Number of bytes to be returned.",
          "source_config": null,
          "value": null
        },
        {
          "name": "timestamp",
          "type": "int",
          "description": "Last seen timestamp to easily start fetching livestream chunks using InputGroupCallStream",
          "source_config": null,
          "value": null
        },
        {
          "name": "quality_update",
          "type": "bool",
          "description": "Indicates if it is a quality update.",
          "source_config": null,
          "value": null
        },
        {
          "name": "channel_id",
          "type": "int",
          "description": "Selected video channel.",
          "source_config": null,
          "value": null
        },
        {
          "name": "quality",
          "type": "ntgcalls.MediaSegmentQuality",
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/SegmentPartRequest"
  },
  "/NTgCalls/Available Types/SsrcGroup.xml": {
    "title": "SsrcGroup",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "SSRC Group with the SSRCs of the video stream and the semantics.",
    "example": {},
    "details": {
      "signature": "class ntgcalls.SsrcGroup",
      "properties": [
        {
          "name": "semantics",
          "type": "str",
          "description": "Enumeration of SSRC group semantics values.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ssrcs",
          "type": "list[int]",
          "description": "SSRC Group.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/SsrcGroup"
  },
  "/NTgCalls/Available Types/VideoDescription.xml": {
    "title": "VideoDescription",
    "lib": "NTgCalls",
    "kind": "type",
    "description": "Stream’s Video Configuration",
    "example": {},
    "details": {
      "signature": "class ntgcalls.VideoDescription",
      "parameters": [
        {
          "name": "fps",
          "type": "int",
          "description": "Frames per second (FPS) for video playback. input: str\nThe input media source.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Available Types/VideoDescription"
  },
  "/NTgCalls/Basic Methods/Connect P2P.xml": {
    "title": "Connect P2P",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows connecting to a Private Call with the output params from Telegram method ConfirmCall when is an outgoing call or PhoneCall when is an incoming call.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\nrtc_servers = ... # Obtain the RTC servers\ndh_config = ... # Obtain the DH configuration\nversions = ... # Obtain the library versions\np2p_allowed = ... # Obtain whether P2P is allowed\nawait app.connect_p2p(\n    -1001185324811,\n    rtc_servers,\n    versions,\n    p2p_allowed\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "rtc_servers",
              "type": "list[ntgcalls.RTCServer]",
              "description": " List of endpoints the user can connect to exchange call data.",
              "source_config": null,
              "value": null
            },
            {
              "name": "versions",
              "type": "list[str]",
              "description": " When using RequestCall and AcceptCall,\n        specify all library versions supported by the client.\n        The server will merge and choose the best library version supported by both peers, returning only the best\n        value in the result of the call's AcceptCall and in the PhoneCallAccepted update received by the caller.",
              "source_config": null,
              "value": null
            },
            {
              "name": "p2p_allowed",
              "type": "bool",
              "description": " Whether to allow P2P connection to the other participant.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionError\nA connection with the specified ID is already established or does not exist. exception ntgcalls.CryptoError",
              "source_config": "P2P_CONN_ERROR",
              "value": null
            },
            {
              "name": "exception ntgcalls.SignalingError",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "exception ntgcalls.SignalingUnsupported",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.connect_p2p()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Connect P2P"
  },
  "/NTgCalls/Basic Methods/Connect.xml": {
    "title": "Connect",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows connecting to Telegram Group Calls with the output params from Telegram method JoinGroupCall.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\ntg_params = ...\n\nawait app.connect(\n    -1001185324811,\n    tg_params,\n    False,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "params",
              "type": "str",
              "description": " Connection params obtained from Telegram.",
              "source_config": null,
              "value": null
            },
            {
              "name": "is_presentation",
              "type": "bool",
              "description": " Whether the connection is for a presentation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found. exception ntgcalls.TelegramServerError\nThis error occurs when the connection between Telegram and the WebRTC service fails. exception ntgcalls.TransportParseException\nThis error occurs when attempting to send invalid Transports.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.connect()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Connect"
  },
  "/NTgCalls/Basic Methods/Create Call.xml": {
    "title": "Create Call",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows getting connection params for Telegram WebRTC connection.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n\nparams = await app.create_call(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "exception ntgcalls.ConnectionError",
              "type": null,
              "description": " exception ntgcalls.InvalidParams\nThis error occurs when attempting to send an invalid MediaSource.\nexception ntgcalls.FileError\nThe specified file does not exist.\nexception ntgcalls.ShellError\nError while executing the shell script.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.create_call() -> str"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Create Call"
  },
  "/NTgCalls/Basic Methods/Create P2P Call.xml": {
    "title": "Create P2P Call",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows creating a Private Call connection that can be used to exchange keys and connect",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\napp = NTgCalls()\n...\n\nawait app.create_p2p_call(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionError\nA connection with the specified ID is already established or does not exist. exception ntgcalls.InvalidParams\nThis error occurs when attempting to send an invalid MediaSource.\nexception ntgcalls.FileError\nThe specified file does not exist.\nexception ntgcalls.ShellError\nError while executing the shell script.",
              "source_config": "P2P_CONN_ERROR",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.create_p2p_call()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Create P2P Call"
  },
  "/NTgCalls/Basic Methods/Exchange Keys.xml": {
    "title": "Exchange Keys",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows exchanging keys for a Private Call connection with the output params from PhoneCallAccepted when is an outgoing call or PhoneCall when is an incoming call.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\ng_a_or_b = ... # Obtain the parameter for key exchange\nfingerprint = ... # Obtain the fingerprint (Optional for outgoing calls)\nparams = await app.exchange_keys(\n    -1001185324811,\n    g_a_or_b,\n    fingerprint\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "g_a_or_b",
              "type": "bytes",
              "description": " Parameter for key exchange.",
              "source_config": null,
              "value": null
            },
            {
              "name": "fingerprint",
              "type": "int",
              "description": " Fingerprint for the connection (Optional when is an outgoing call).",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionError\nA connection with the specified ID is already established or does not exist. exception ntgcalls.CryptoError",
              "source_config": "P2P_CONN_ERROR",
              "value": null
            },
            {
              "name": "exception ntgcalls.InvalidParams",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.exchange_keys() -> ntgcalls.AuthParams"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Exchange Keys"
  },
  "/NTgCalls/Basic Methods/Init Exchange.xml": {
    "title": "Init Exchange",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows initializing a Private Call connection that can be used to exchange keys and connect with the output params from GetDhConfig and PhoneCallRequested when is an incoming call and then use the output params for AcceptCall (When is an incoming call) or RequestCall with Protocol.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\ndh_config = ... # Obtain the DH configuration\ng_a_hash = ... # Parameter for key exchange (Only when is incoming call)\nparams = await app.init_exchange(\n    -1001185324811,\n    config,\n    g_a_hash,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "config",
              "type": "ntgcalls.DhConfig",
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "g_a_hash",
              "type": "Optional[bytes]",
              "description": " Parameter for key exchange (Only when is incoming call).",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            },
            {
              "name": "exception ntgcalls.ConnectionError",
              "type": null,
              "description": " When the exchange was already initialized.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.init_exchange()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Init Exchange"
  },
  "/NTgCalls/Basic Methods/Init Presentation.xml": {
    "title": "Init Presentation",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows initializing a presentation connection, which is a connection for sharing the screen.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nawait app.init_presentation(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.init_presentation()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Init Presentation"
  },
  "/NTgCalls/Basic Methods/Skip Exchange.xml": {
    "title": "Skip Exchange",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows skipping the exchange of keys for a Private Call connection by using the encryption key already exchanged.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\nencryption_key = ... # Obtain the encryption key\napp = NTgCalls()\nawait app.skip_exchange(\n    -1001185324811,\n    encryption_key,\n    True,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "encryption_key",
              "type": "bytes",
              "description": " Encryption key for the connection.",
              "source_config": null,
              "value": null
            },
            {
              "name": "is_outgoing",
              "type": "bool",
              "description": " Whether the call is outgoing.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            },
            {
              "name": "exception ntgcalls.ConnectionError",
              "type": null,
              "description": " When the connection was already established or the key already exchanged.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.skip_exchange()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Skip Exchange"
  },
  "/NTgCalls/Basic Methods/Stop Presentation.xml": {
    "title": "Stop Presentation",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows stopping the presentation connection.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nawait app.stop_presentation(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "exception ntgcalls.ConnectionError",
              "type": null,
              "description": " exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.stop_presentation()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Stop Presentation"
  },
  "/NTgCalls/Basic Methods/Stop.xml": {
    "title": "Stop",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allow stopping a WebRTC connection.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nawait app.stop(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.stop()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/Stop"
  },
  "/NTgCalls/Basic Methods/ntg_connect.xml": {
    "title": "ntg_connect",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows connecting to Telegram Group Calls with the output params from Telegram method JoinGroupCall.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    char* params = ...;  // Obtain connection parameters\n    ntg_async_struct future;\n    // Initialize the async struct\n    int result = ntg_connect(ptr, chatID, params, False, &future);\n    // Wait for the async operation to complete\n    ...\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "char* params",
              "type": null,
              "description": " Connection params obtained from Telegram.",
              "source_config": null,
              "value": null
            },
            {
              "name": "bool is_presentation",
              "type": null,
              "description": " Whether the connection is for a presentation. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found. #NTG_ERROR_RTMP_STREAMING_UNSUPPORTED -300\nYou need to use FFmpeg to stream to an RTMP stream. #NTG_INVALID_TRANSPORT -301\nThe specified transport is invalid.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            },
            {
              "name": "#NTG_CONNECTION_FAILED -302",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_connect()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_connect"
  },
  "/NTgCalls/Basic Methods/ntg_connect_p2p.xml": {
    "title": "ntg_connect_p2p",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows connecting to a Private Call with the output params from Telegram method ConfirmCall when is an outgoing call or PhoneCall when is an incoming call.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_rtc_server_struct* rtcServers = ...; // Obtain the RTC servers\n    int rtcServersCount = ...; // Obtain the count of RTC servers\n    char** libraryVersions = ...; // Obtain the library versions\n    int libraryVersionCount = ...; // Obtain the count of library versions\n    bool p2pAllowed = ...; // Obtain whether P2P is allowed\n    ntg_async_struct future;\n    // Initialize the async struct\n    int result = ntg_connect_p2p(\n        ptr,\n        chatID,\n        rtcServers,\n        rtcServersCount,\n        libraryVersions,\n        libraryVersionCount,\n        p2pAllowed,\n        &future\n    );\n    // Wait for the async operation to complete\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_rtc_server_struct* servers",
              "type": null,
              "description": " List of endpoints the user can connect to exchange call data.",
              "source_config": null,
              "value": null
            },
            {
              "name": "int serversSize",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "char** versions",
              "type": null,
              "description": " When using RequestCall and AcceptCall,\n        specify all library versions supported by the client.\n        The server will merge and choose the best library version supported by both peers, returning only the best\n        value in the result of the call's AcceptCall and in the PhoneCallAccepted update received by the caller.",
              "source_config": null,
              "value": null
            },
            {
              "name": "int versionsSize",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "bool p2pAllowed",
              "type": null,
              "description": " Whether to allow P2P connection to the other participant. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_CONNECTION_ALREADY_EXISTS -100\nA connection with the specified ID already exists. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found. #NTG_CRYPTO_ERROR -102",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            },
            {
              "name": "#NTG_SIGNALING_ERROR -104",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "#NTG_SIGNALING_UNSUPPORTED -105",
              "type": null,
              "description": " #NTG_INVALID_TRANSPORT -301\nThe specified transport is invalid.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_connect_p2p()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_connect_p2p"
  },
  "/NTgCalls/Basic Methods/ntg_create.xml": {
    "title": "ntg_create",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows getting connection params for Telegram WebRTC connection.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    char* buffer;\n    ntg_async_struct future;\n    // Initialize the async struct\n    int result = ntg_create(ptr, chatID, &buffer);\n    // Wait for the async operation to complete and\n    // use 'buffer' for JoinGroupCall\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "char** buffer",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred. #NTG_CONNECTION_ALREADY_EXISTS -100\nA connection with the specified ID already exists. #NTG_FILE_NOT_FOUND -200\nThe specified file was not found.\n#NTG_ENCODER_NOT_FOUND -201\nThe required encoder was not found.\n#NTG_FFMPEG_NOT_FOUND -202\nFFmpeg is not found in the system.\n#NTG_SHELL_ERROR -203\nAn error occurred while executing a shell command.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_create()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_create"
  },
  "/NTgCalls/Basic Methods/ntg_create_p2p.xml": {
    "title": "ntg_create_p2p",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows creating a Private Call connection that can be used to exchange keys and connect",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_async_struct future;\n    // Initialize the async struct\n    int result = ntg_create_p2p(\n        ptr,\n        chatID,\n        &future\n    );\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found. #NTG_CONNECTION_ALREADY_EXISTS -100\nA connection with the specified ID already exists. #NTG_FILE_NOT_FOUND -200\nThe specified file was not found.\n#NTG_ENCODER_NOT_FOUND -201\nThe required encoder was not found.\n#NTG_FFMPEG_NOT_FOUND -202\nFFmpeg is not found in the system.\n#NTG_SHELL_ERROR -203\nAn error occurred while executing a shell command.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_create_p2p()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_create_p2p"
  },
  "/NTgCalls/Basic Methods/ntg_exchange_keys.xml": {
    "title": "ntg_exchange_keys",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows exchanging keys for a Private Call connection with the output params from PhoneCallAccepted when is an outgoing call or PhoneCall when is an incoming call.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    uint8_t* g_a_or_b = ...; // Obtain the parameter for key exchange\n    int sizeGAOrB = ...; // Obtain the size of the parameter for key exchange\n    int64_t fingerprint = ...; // Obtain the fingerprint\n    ntg_auth_params_struct buffer;\n    // Initialize the async struct\n    ntg_async_struct future;\n    int result = ntg_exchange_keys(ptr, chatID, g_a_or_b, sizeGAOrB, fingerprint, &buffer, &future);\n    // Wait for the async operation to complete\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "uint8_t* g_a_or_b",
              "type": null,
              "description": " Parameter for key exchange.",
              "source_config": null,
              "value": null
            },
            {
              "name": "int sizeGAOrB",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "int64_t fingerprint",
              "type": null,
              "description": " Fingerprint for the connection (Optional when is an outgoing call).",
              "source_config": null,
              "value": null
            },
            {
              "name": "ntg_auth_params_struct* authParams",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_CONNECTION_ALREADY_EXISTS -100\nA connection with the specified ID already exists. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found. #NTG_CRYPTO_ERROR -102",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            },
            {
              "name": "#NTG_MISSING_FINGERPRINT -103",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_exchange_keys()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_exchange_keys"
  },
  "/NTgCalls/Basic Methods/ntg_init_exchange.xml": {
    "title": "ntg_init_exchange",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows initializing a Private Call connection that can be used to exchange keys and connect with the output params from GetDhConfig and PhoneCallRequested when is an incoming call and then use the output params for AcceptCall (When is an incoming call) or RequestCall with Protocol.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_dh_config_struct dhConfig = ...; // Obtain the DH configuration\n    uint8_t* g_a_hash = ...; // Parameter for key exchange (Only when is incoming call)\n    int sizeG_A_Hash = ...; // Size of the parameter for key exchange (Only when is incoming call)\n    uint8_t* buffer[32];\n    // Initialize the async struct\n    ntg_async_struct future;\n    int result = ntg_init_exchange(\n        ptr,\n        chatID,\n        &dhConfig,\n        g_a_hash,\n        sizeG_A_Hash,\n        buffer,\n        sizeof(buffer),\n        &future\n    );\n    // Wait for the async operation to complete\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_dh_config_struct* dhConfig",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "uint8_t* g_a_hash",
              "type": null,
              "description": " Parameter for key exchange (Only when is incoming call).",
              "source_config": null,
              "value": null
            },
            {
              "name": "int sizeGAHash",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "uint8_t* buffer",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "int sizeBuffer",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            },
            {
              "name": "#NTG_ERROR_CONNECTION -302",
              "type": null,
              "description": " When the exchange was already initialized.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_init_exchange()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_init_exchange"
  },
  "/NTgCalls/Basic Methods/ntg_init_presentation.xml": {
    "title": "ntg_init_presentation",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows initializing a presentation connection, which is a connection for sharing the screen.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_init_presentation(ptr, chatID, &future);\n    // Wait for the async operation to complete\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            },
            {
              "name": "#NTG_ERROR_RTC_CONNECTION_NEEDED -306",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_init_presentation()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_init_presentation"
  },
  "/NTgCalls/Basic Methods/ntg_skip_exchange.xml": {
    "title": "ntg_skip_exchange",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows skipping the exchange of keys for a Private Call connection by using the encryption key already exchanged.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    uint8_t* encryption_key = ... # Obtain the encryption key\n    int size = ...; // Obtain the size of the encryption key\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_skip_exchange(ptr, chatID, encryption_key, size, False, &future);\n    // Wait for the async operation to complete\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "uint8_t* encryption_key",
              "type": null,
              "description": " Encryption key for the connection.",
              "source_config": null,
              "value": null
            },
            {
              "name": "int size",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "bool is_outgoing",
              "type": null,
              "description": " Whether the call is outgoing. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            },
            {
              "name": "#NTG_ERROR_CONNECTION -302",
              "type": null,
              "description": " When the connection was already established or the key already exchanged.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_skip_exchange()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_skip_exchange"
  },
  "/NTgCalls/Basic Methods/ntg_stop.xml": {
    "title": "ntg_stop",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allow stopping a WebRTC connection.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    char* params = ...;  // Obtain connection parameters\n    ntg_async_struct future;\n    // Initialize the async struct\n    int result = ntg_stop(ptr, chatID);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_stop()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_stop"
  },
  "/NTgCalls/Basic Methods/ntg_stop_presentation.xml": {
    "title": "ntg_stop_presentation",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows stopping the presentation connection.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    // Initialize the async struct\n    ntg_async_struct future;\n    ntg_stop_presentation(ptr, chatID, &future);\n    // Wait for the async operation to complete\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_stop_presentation()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Basic Methods/ntg_stop_presentation"
  },
  "/NTgCalls/Build Guide.xml": {
    "title": "Introduction",
    "lib": "NTgCalls",
    "kind": "misc",
    "description": "Being a modern library, Below, we will guide you through the step-by-step process of installing the prerequisites required to compile NTgCalls on your operating system. In this section, you'll learn how to clone the NTgCalls repository and build the library from source. To begin building NTgCalls from source, you need to clone the GitHub repository. Follow these steps to clone the repo: Now that you have successfully installed all the required prerequisites for NTgCalls, it's time to build the library. Follow these steps to compile NTgCalls on your system. For developers looking to use NTgCalls with C and C++, we provide C Bindings. Follow these steps to compile NTgCalls with C Bindings in either Release or Debug mode: NTgCalls offers Python Bindings, facilitating seamless integration with Python. Follow these steps to compile NTgCalls with Python Bindings: NTgCalls offers Java for Android Bindings, facilitating seamless integration with Java for Android. Follow these steps to compile NTgCalls with Java for Android Bindings:",
    "example": {},
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Build Guide"
  },
  "/NTgCalls/Callback Registration.xml": {
    "title": "Callback Registration",
    "lib": "NTgCalls",
    "kind": "misc",
    "description": "Callbacks registration allows you to specify custom functions to be executed when specific events occur or conditions are met within your application. These events might include changes in call status, media state updates, or other critical moments in the NTgCalls library's operation. When registering callbacks, keep in mind that each registration replaces the previously set callback. Callback for handling when a stream playback ends. When a stream ends, this callback will be triggered. uintptr_t ptr The pointer to the NTgCalls instance. The callback function to be executed when the stream ends. void* userData Custom data that can be passed to the callback function. Callback for handling when is needed to update GroupCall MTProto Configurations. uintptr_t ptr The pointer to the NTgCalls instance. The callback function to be executed when the stream needs to update MTProto stream parameters. void* userData Custom data that can be passed to the callback function. Callback to listen for when the WebRTC connection has changed his state. uintptr_t ptr The pointer to the NTgCalls instance. The callback function to be executed when the connection state changes. void* userData Custom data that can be passed to the callback function. Callback for handling when a signaling message is received. uintptr_t ptr The pointer to the NTgCalls instance. The callback function to be executed when signaling data is received. void* userData Custom data that can be passed to the callback function. Callback for handling when a group of frames is received. uintptr_t ptr The pointer to the NTgCalls instance. Callback function to be executed when frames are received. void* userData Custom data that can be passed to the callback function. Callback for handling when the remote source changes. uintptr_t ptr The pointer to the NTgCalls instance. Callback function to be executed when a remote source is added or removed. void* userData Custom data that can be passed to the callback function. Register a logger for the library, this logger will be used for all instances. Callback for logging messages. Callback for handling when a broadcast stream part is being requested. uintptr_t ptr The pointer to the NTgCalls instance. Callback function to be executed when a broadcast part is requested. void* userData Custom data that can be passed to the callback function. Callback for handling when the broadcast timestamp is being requested. uintptr_t ptr The pointer to the NTgCalls instance. Callback function to be executed when the broadcast timestamp is requested. void* userData Custom data that can be passed to the callback function.",
    "example": {},
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when a stream playback ends. When a stream ends, this callback will be triggered.",
              "source_config": "CALLBACK_END_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_stream_callback callback",
              "type": null,
              "description": " void* userData\nCustom data that can be passed to the callback function.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when is needed to update GroupCall MTProto Configurations.",
              "source_config": "CALLBACK_UPGRADE_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_upgrade_callback callback",
              "type": null,
              "description": " void* userData\nCustom data that can be passed to the callback function.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback to listen for when the WebRTC connection has changed his state.",
              "source_config": "CALLBACK_CONN_CHANGE_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_connection_callback callback",
              "type": null,
              "description": " void* userData\nCustom data that can be passed to the callback function.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when a signaling message is received.",
              "source_config": "CALLBACK_SIGNALING_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_signaling_callback callback",
              "type": null,
              "description": " void* userData\nCustom data that can be passed to the callback function.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when a group of frames is received.",
              "source_config": "CALLBACK_FRAMES_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_frames_callback callback",
              "type": null,
              "description": " void* userData\nCustom data that can be passed to the callback function.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when the remote source changes.",
              "source_config": "CALLBACK_REMOTE_SOURCE_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_remote_source_callback callback",
              "type": null,
              "description": " void* userData\nCustom data that can be passed to the callback function.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Register a logger for the library, this logger will be used for all instances.",
              "source_config": "REGISTER_LOGGER_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "ntg_log_message_callback callback",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when a broadcast stream part is being requested.",
              "source_config": "CALLBACK_REQUEST_BROADCAST_PART_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_broadcast_part_callback callback",
              "type": null,
              "description": " void* userData\nCustom data that can be passed to the callback function.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when the broadcast timestamp is being requested.",
              "source_config": "CALLBACK_REQUEST_BROADCAST_TIME_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "ntg_broadcast_timestamp_callback callback",
              "type": null,
              "description": " void* userData\nCustom data that can be passed to the callback function.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Callback Registration"
  },
  "/NTgCalls/Callbacks.xml": {
    "title": "Callbacks",
    "lib": "NTgCalls",
    "kind": "misc",
    "description": "Callbacks allows you to define custom behavior or actions that should be triggered in response to specific events or conditions within your application. These events could include call-related occurrences, state changes, or other interactions with the NTgCalls library. When registering callbacks, keep in mind that each registration replaces the previously set callback. Callback for handling when a stream playback ends. When a stream ends, this callback will be triggered. Callback for handling when is needed to update GroupCall MTProto Configurations. Callback to listen for when the WebRTC connection has changed his state. Callback for handling when a signaling message is received. Callback for handling when a group of frames is received. Callback for handling when the remote source changes. Callback for handling when a broadcast stream part is being requested. Callback for handling when the broadcast timestamp is being requested.",
    "example": {},
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when a stream playback ends. When a stream ends, this callback will be triggered.",
              "source_config": "CALLBACK_END_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when is needed to update GroupCall MTProto Configurations.",
              "source_config": "CALLBACK_UPGRADE_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback to listen for when the WebRTC connection has changed his state.",
              "source_config": "CALLBACK_CONN_CHANGE_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when a signaling message is received.",
              "source_config": "CALLBACK_SIGNALING_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when a group of frames is received.",
              "source_config": "CALLBACK_FRAMES_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when the remote source changes.",
              "source_config": "CALLBACK_REMOTE_SOURCE_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when a broadcast stream part is being requested.",
              "source_config": "CALLBACK_REQUEST_BROADCAST_PART_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Callback for handling when the broadcast timestamp is being requested.",
              "source_config": "CALLBACK_REQUEST_BROADCAST_TIME_DESC",
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Callbacks"
  },
  "/NTgCalls/Client.xml": {
    "title": "NTgCalls Client",
    "lib": "NTgCalls",
    "kind": "misc",
    "description": "Welcome to the API Reference section, where you'll find comprehensive information about the NTgCalls API. This is your gateway to in-depth details about the main Client class, its methods, types, all of which play a crucial role in utilizing NTgCalls effectively. The NTgCalls Client is your primary interface for seamless interaction with Group Calls. Get a list of all calls. Get an estimate of the CPU usage of the current process. Return \"pong\" message when calling this method This method allows getting the protocol for a Private Call connection with the output params for Telegram constructor PhoneCallProtocol. This method allows getting all the available media devices, such as microphones and cameras. Enable the GLib main loop to allow the library to use it for PipeWire on OSes that uses Wayland. Enable or disable the GLib main loop.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n\napp = NTgCalls()\nprint(app.ping())"
    },
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "The NTgCalls Client is your primary interface for seamless interaction with Group Calls.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "STATIC METHODS",
          "items": [
            {
              "name": "async calls() -> dict[int, ntgcalls.StreamStatus]",
              "type": null,
              "description": " Get a list of all calls.",
              "source_config": null,
              "value": null
            },
            {
              "name": "async cpu_usage() -> float",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "ping() -> str",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "get_protocol() -> ntgcalls.Protocol",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "get_media_devices() -> ntgcalls.MediaDevices",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "enable_glib_loop()",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "enable",
              "type": "bool",
              "description": " Enable or disable the GLib main loop.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Client"
  },
  "/NTgCalls/Getting Started.xml": {
    "title": "Getting Started",
    "lib": "NTgCalls",
    "kind": "misc",
    "description": "This section provides documentation for the NTgCalls C API, which allows you to use NTgCalls in various programming languages, including C, C++, Go, Rust, Deno, and more. Below, you will find detailed information about the initialization and cleanup functions. To get started with NTgCalls in your application, you need to initialize the library using the To clean up and release the resources used by NTgCalls, you should call the You can retrieve the version of the NTgCalls library currently in use using the Retrieve library version A character buffer to store the version string.",
    "example": {},
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "char** buffer",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Getting Started"
  },
  "/NTgCalls/Quick Start.xml": {
    "title": "Quick Start",
    "lib": "NTgCalls",
    "kind": "misc",
    "description": "Welcome to this section, which is primarily intended for developers who are moderately experienced or seeking to perform a porting in their language using C bindings. If you are new to Python development, we strongly recommend using Looking for real-world implementations? Below is a selection of bots actively maintained and recommended by the community, all using NTgCalls/Py-TgCalls under the hood. These can be a great source of inspiration or even a solid starting point for your own project. In the following section, we present a comprehensive catalog of libraries, thoughtfully crafted by the community and officially endorsed, all of which leverage the robust capabilities of NTgCalls. What we've just seen are simplified ports of NTgCalls. However, now let's delve deeper! In the upcoming pages, we'll explore NTgCalls in a step-by-step manner, covering how it functions, how to install it, and more. Are you feeling eager to continue? You can take a shortcut to the Call Methods section and return later to delve into more details.",
    "example": {},
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Quick Start"
  },
  "/NTgCalls/Stream Methods/Mute.xml": {
    "title": "Mute",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows you to mute the WebRTC stream.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nawait app.mute(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.mute() -> bool"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/Mute"
  },
  "/NTgCalls/Stream Methods/Pause.xml": {
    "title": "Pause",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows you to pause the WebRTC stream.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nawait app.pause(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.pause() -> bool"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/Pause"
  },
  "/NTgCalls/Stream Methods/Resume.xml": {
    "title": "Resume",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows you to resume the WebRTC stream.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nawait app.resume(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.resume() -> bool"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/Resume"
  },
  "/NTgCalls/Stream Methods/Set Stream Sources.xml": {
    "title": "Set Stream Sources",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows changing the streaming file in a Group Call.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\nfrom ntgcalls import StreamMode\nfrom ntgcalls import MediaDescription\nfrom ntgcalls import AudioDescription\n...\n\napp = NTgCalls()\n\nawait app.set_stream_sources(\n    -1001185324811,\n    StreamMode.CAPTURE,\n    MediaDescription(\n        AudioDescription(\n            media_source=MediaSource.File,\n            input=\"foxes.pcm\",\n            sample_rate=96000,\n            bits_per_sample=16,\n            channel_count=2,\n        ),\n    )\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            },
            {
              "name": "direction",
              "type": "ntgcalls.StreamMode",
              "description": "Stream direction for the stream.",
              "source_config": "STREAM_MODE",
              "value": null
            },
            {
              "name": "media",
              "type": "ntgcalls.MediaDescription",
              "description": "Media parameters of the stream.",
              "source_config": "ARG_STREAM_PARAMS",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found. exception ntgcalls.InvalidParams\nThis error occurs when attempting to send an invalid MediaSource.\nexception ntgcalls.FileError\nThe specified file does not exist.\nexception ntgcalls.ShellError\nError while executing the shell script. exception ntgcalls.RTMPStreamingUnsupported\nYou need to use FFmpeg to stream to an RTMP stream.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.set_stream_sources()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/Set Stream Sources"
  },
  "/NTgCalls/Stream Methods/Time.xml": {
    "title": "Time",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows getting the played time of the stream.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls(client)\n\nprint(\n    await app.time(\n        -1001185324811,\n    )\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            },
            {
              "name": "direction",
              "type": "ntgcalls.StreamMode",
              "description": "Stream direction for the stream.",
              "source_config": "STREAM_MODE",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.time() -> int"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/Time"
  },
  "/NTgCalls/Stream Methods/UnMute.xml": {
    "title": "UnMute",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows you to unmute the WebRTC stream.",
    "example": {
      "language": "python",
      "code": "from ntgcalls import NTgCalls\n...\n\napp = NTgCalls()\n...\n\nawait app.unmute(\n    -1001185324811,\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "int",
              "description": "Unique identifier of a chat.",
              "source_config": "ARG_INT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception ntgcalls.ConnectionNotFound\nThe specified connection was not found.",
              "source_config": "CONNECTION_NOT_FOUND_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "async NTgCalls.unmute() -> bool"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/UnMute"
  },
  "/NTgCalls/Stream Methods/ntg_mute.xml": {
    "title": "ntg_mute",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows you to mute the WebRTC stream.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_async_struct future;\n    // Initialize the async struct\n    int errCode = ntg_mute(ptr, chatID, &future);\n    // Wait for the async operation to complete\n    if (future.errorCode == 0) {\n        printf(\"Audio muted.\\n\");\n    } else if (future.errorCode == 1) {\n        printf(\"Audio was already muted.\\n\");\n    } else {\n        printf(\"Failed to mute audio (Error code: %d).\\n\", future.errorCode);\n        return 1;\n    }\n    ... // Your Code Here\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_mute()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/ntg_mute"
  },
  "/NTgCalls/Stream Methods/ntg_pause.xml": {
    "title": "ntg_pause",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows you to pause the WebRTC stream.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_async_struct future;\n    // Initialize the async struct\n    int errCode = ntg_pause(ptr, chatID);\n    // Wait for the async operation to complete\n    if (future.errorCode == 0) {\n        printf(\"Audio paused.\\n\");\n    } else if (future.errorCode == 1) {\n        printf(\"Audio was already paused.\\n\");\n    } else {\n        printf(\"Failed to pause audio (Error code: %d).\\n\", result);\n        return 1;\n    }\n    ... // Your Code Here\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_pause()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/ntg_pause"
  },
  "/NTgCalls/Stream Methods/ntg_resume.xml": {
    "title": "ntg_resume",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows you to resume the WebRTC stream.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_async_struct future;\n    // Initialize the async struct\n    int errCode = ntg_resume(ptr, chatID, &future);\n    // Wait for the async operation to complete\n    if (future.errorCode == 0) {\n        printf(\"Audio resumed.\\n\");\n    } else if (future.errorCode == 1) {\n        printf(\"Audio was already resumed.\\n\");\n    } else {\n        printf(\"Failed to resume audio (Error code: %d).\\n\", result);\n        return 1;\n    }\n    ... // Your Code Here\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_resume()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/ntg_resume"
  },
  "/NTgCalls/Stream Methods/ntg_set_stream_sources.xml": {
    "title": "ntg_set_stream_sources",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows changing the streaming file in a Group Call.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_media_description_struct desc = {\n        // Fill in updated media description fields\n    };\n    ntg_async_struct future;\n    // Initialize the async struct\n    int result = ntg_set_stream_sources(ptr, chatID, NTG_STREAM_CAPTURE, desc, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_stream_mode_enum streamMode\nStream direction for the stream. ntg_media_description_struct desc\nMedia parameters of the stream. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found. #NTG_FILE_NOT_FOUND -200\nThe specified file was not found.\n#NTG_ENCODER_NOT_FOUND -201\nThe required encoder was not found.\n#NTG_FFMPEG_NOT_FOUND -202\nFFmpeg is not found in the system.\n#NTG_SHELL_ERROR -203\nAn error occurred while executing a shell command. #NTG_ERROR_RTMP_STREAMING_UNSUPPORTED -300\nYou need to use FFmpeg to stream to an RTMP stream.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_set_stream_sources()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/ntg_set_stream_sources"
  },
  "/NTgCalls/Stream Methods/ntg_time.xml": {
    "title": "ntg_time",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows getting the played time of the stream.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    int64_t time = 0;\n    ntg_async_struct future;\n    // Initialize the async struct\n    int64_t result = ntg_time(ptr, chatID, NTG_STREAM_CAPTURE, &time, &future);\n    // Wait for the async operation to complete\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_stream_mode_enum streamMode\nStream direction for the stream.",
              "source_config": "ARG_C_PTR",
              "value": null
            },
            {
              "name": "int64_t* time",
              "type": null,
              "description": " ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_time()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/ntg_time"
  },
  "/NTgCalls/Stream Methods/ntg_unmute.xml": {
    "title": "ntg_unmute",
    "lib": "NTgCalls",
    "kind": "method",
    "description": "This method allows you to unmute the WebRTC stream.",
    "example": {
      "language": "c",
      "code": "#include <stdint.h>\n#include \"ntgcalls.h\"\n\nint main() {\n    uintptr_t ptr = ntg_init();\n    ...\n    int64_t chatID = ...; // Obtain the chat ID\n    ntg_async_struct future;\n    // Initialize the async struct\n    int errCode = ntg_unmute(ptr, chatID, &future);\n    // Wait for the async operation to complete\n    if (future.errorCode == 0) {\n        printf(\"Audio unmuted.\\n\");\n    } else if (future.errorCode == 1) {\n        printf(\"Audio was already unmuted.\\n\");\n    } else {\n        printf(\"Failed to unmute audio (Error code: %d).\\n\", future.errorCode);\n        return 1;\n    }\n    ... // Your Code Here\n    return 0;\n}"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "uintptr_t ptr\nThe pointer to the NTgCalls instance. int64_t chatID\nUnique identifier of a chat. ntg_async_struct* future\nThe ntg_async_struct instance that will be used to track the async operation.",
              "source_config": "ARG_C_PTR",
              "value": null
            }
          ]
        },
        {
          "title": "ERROR CODES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "#NTG_INVALID_UID -2\nThe provided UID is invalid. #NTG_UNKNOWN_EXCEPTION -1\nAn unknown exception occurred.\n#NTG_CONNECTION_NOT_FOUND -101\nThe specified connection was not found.",
              "source_config": "BASE_SYNC_C_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "int ntg_unmute()"
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Stream Methods/ntg_unmute"
  },
  "/NTgCalls/Using Async.xml": {
    "title": "Using Async",
    "lib": "NTgCalls",
    "kind": "misc",
    "description": "NTgCalls starting from version 1.2.0 supports asynchronous calls to function using To make an async call in a sync way, you can use a mutex to wait for the operation to complete: You can pass custom data to the async call by using the",
    "example": {
      "language": "cpp",
      "code": "#include <ntgcalls.h>\n#include <mutex>\n\nvoid onCallReady(void* data) {\n    ((std::mutex*)data)->unlock();\n}\n\nvoid makeAsyncCall() {\n    ntg_async_struct asyncData;\n    std::mutex mtx;\n    asyncData.userData = &mtx;\n    asyncData.promise = onCallReady;\n    mtx.lock();\n    int error = ntg_pause(asyncData);\n    if (error != 0) {\n        // Handle error\n    }\n    mtx.lock();\n    // Async operation completed\n    if (asyncData.errorCode != 0) {\n        // Handle Async error\n    }\n}"
    },
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/NTgCalls/Using Async"
  },
  "/PyTgCalls/Advanced Methods/Change Volume Call.xml": {
    "title": "Change Volume Call",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method changes the userbot’s output volume using MTProto APIs.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.change_volume_call(\n    -1001185324811,\n    175,\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            },
            {
              "name": "volume",
              "type": "int",
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method.\nexception pytgcalls.exceptions.NotInCallError\nThis error occurs when attempting to execute an action on a call that you have not joined.\nexception pytgcalls.exceptions.NoActiveGroupCall\nYou cannot edit a group call that hasn't been initiated. exception pytgcalls.exceptions.UnsupportedMethod\nThis error occurs when attempting to execute an action on a call kind that doesn't support it.",
              "source_config": "CONNECTION_EXCEPTIONS",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.change_volume_call()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Methods/Change Volume Call"
  },
  "/PyTgCalls/Advanced Methods/Get Participants.xml": {
    "title": "Get Participants",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method returns the list of a group call’s participants using MTProto APIs.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.get_participants(\n    -1001185324811,\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.UnsupportedMethod\nThis error occurs when attempting to execute an action on a call kind that doesn't support it.",
              "source_config": "UNSUPPORTED_METHOD_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.get_participants() -> list[GroupCallParticipant]"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Methods/Get Participants"
  },
  "/PyTgCalls/Advanced Methods/Send Frame.xml": {
    "title": "Send Frame",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows sending an external frame to the group call or private call.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import PyTgCalls\nfrom pytgcalls import Device\nfrom pytgcalls.types import Frame\nfrom datetime import datetime\n...\n\napp = PyTgCalls()\n...\npcm16_le_data = ...\n\napp.send_frame(\n    -1001185324811,\n    Device.MICROPHONE,\n    pcm16_le_data,\n    Frame.Info(\n        int(datetime.now().timestamp()),\n    )\n)"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            },
            {
              "name": "device",
              "type": "pytgcalls.Device",
              "description": " Device Kind",
              "source_config": null,
              "value": null
            },
            {
              "name": "frame",
              "type": "bytes",
              "description": " Frame buffer",
              "source_config": null,
              "value": null
            },
            {
              "name": "frame_data",
              "type": "pytgcalls.Frame.Info",
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method.\nexception pytgcalls.exceptions.NotInCallError\nThis error occurs when attempting to execute an action on a call that you have not joined.",
              "source_config": "BASE_EXCEPTIONS",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.send_frame()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Methods/Send Frame"
  },
  "/PyTgCalls/Advanced Types/Call.xml": {
    "title": "Call",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Call Descriptor for a Group Call or Private Call.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.Call",
      "properties": [
        {
          "name": "call_type",
          "type": "Type",
          "description": "The type of the call.",
          "source_config": null,
          "value": null
        },
        {
          "name": "playback",
          "type": "Status",
          "description": "Playback stream status.",
          "source_config": null,
          "value": null
        },
        {
          "name": "capture",
          "type": "Status",
          "description": "Capture stream status.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/Call"
  },
  "/PyTgCalls/Advanced Types/CallConfig.xml": {
    "title": "CallConfig",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Configuration descriptor for a private call",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.CallConfig",
      "parameters": [
        {
          "name": "timeout",
          "type": "int",
          "description": "Timeout for an answer from the user",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/CallConfig"
  },
  "/PyTgCalls/Advanced Types/ChatUpdate.xml": {
    "title": "ChatUpdate",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Represents a chat update.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.ChatUpdate",
      "properties": [
        {
          "name": "status",
          "type": "Status",
          "description": "Status of the chat.",
          "source_config": null,
          "value": null
        },
        {
          "name": "action",
          "type": "Any",
          "description": "Action of the chat.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/ChatUpdate"
  },
  "/PyTgCalls/Advanced Types/Frame Info.xml": {
    "title": "Frame Info",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Represents frame info.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.Frame.Info",
      "properties": [
        {
          "name": "capture_time",
          "type": "int",
          "description": "Absolute capture timestamp in milliseconds.",
          "source_config": null,
          "value": null
        },
        {
          "name": "width",
          "type": "int",
          "description": "Rotation of the video frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "height",
          "type": "int",
          "description": "Width of the video frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "rotation",
          "type": "int",
          "description": "Height of the video frame.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/Frame Info"
  },
  "/PyTgCalls/Advanced Types/Frame.xml": {
    "title": "Frame",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Frame descriptor for the media stream.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.Frame",
      "properties": [
        {
          "name": "ssrc",
          "type": "int",
          "description": "SSRC of the frame.",
          "source_config": null,
          "value": null
        },
        {
          "name": "frame",
          "type": "bytes",
          "description": "Frame buffer",
          "source_config": null,
          "value": null
        },
        {
          "name": "info",
          "type": "Frame.Info",
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/Frame"
  },
  "/PyTgCalls/Advanced Types/GroupCallConfig.xml": {
    "title": "GroupCallConfig",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Configuration descriptor for a group call",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.GroupCallConfig",
      "parameters": [
        {
          "name": "invite_hash",
          "type": "Optional[str]",
          "description": "Unique identifier for a group call invite in t.me link form",
          "source_config": null,
          "value": null
        },
        {
          "name": "join_as",
          "type": "",
          "description": "InputPeer to join as a channel or a profile",
          "source_config": null,
          "value": null
        },
        {
          "name": "auto_start",
          "type": "bool",
          "description": "Start group call if not present, by default, is True",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/GroupCallConfig"
  },
  "/PyTgCalls/Advanced Types/GroupCallParticipant.xml": {
    "title": "GroupCallParticipant",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Info about a group call participant",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.GroupCallParticipant",
      "properties": [
        {
          "name": "user_id",
          "type": "int",
          "description": "Unique identifier of a participant.",
          "source_config": null,
          "value": null
        },
        {
          "name": "muted",
          "type": "bool",
          "description": "Whether the participant is muted.",
          "source_config": null,
          "value": null
        },
        {
          "name": "muted_by_admin",
          "type": "bool",
          "description": "Whether an admin has muted the participant.",
          "source_config": null,
          "value": null
        },
        {
          "name": "video",
          "type": "bool",
          "description": "Whether the participant is currently broadcasting a video stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "screen_sharing",
          "type": "bool",
          "description": "Whether the participant is currently screen sharing.",
          "source_config": null,
          "value": null
        },
        {
          "name": "video_camera",
          "type": "bool",
          "description": "Whether the participant is currently broadcasting a video camera.",
          "source_config": null,
          "value": null
        },
        {
          "name": "raised_hand",
          "type": "bool",
          "description": "Whether the participant has raised the hand.",
          "source_config": null,
          "value": null
        },
        {
          "name": "volume",
          "type": "int",
          "description": "Volume level of the participant.",
          "source_config": null,
          "value": null
        },
        {
          "name": "source",
          "type": "int",
          "description": "Source ID of the participant's audio stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "video_info",
          "type": "Optional[pytgcalls.SourceInfo]",
          "description": "Info about the video stream the participant is currently broadcasting.",
          "source_config": null,
          "value": null
        },
        {
          "name": "presentation_info",
          "type": "Optional[pytgcalls.SourceInfo]",
          "description": "Info about the screen sharing stream the participant is currently broadcasting.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/GroupCallParticipant"
  },
  "/PyTgCalls/Advanced Types/SourceInfo.xml": {
    "title": "SourceInfo",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Info about a source in a group call.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.SourceInfo",
      "properties": [
        {
          "name": "endpoint",
          "type": "str",
          "description": "Endpoint of the source.",
          "source_config": null,
          "value": null
        },
        {
          "name": "sources",
          "type": "list[ntgcalls.SsrcGroup]",
          "description": "",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/SourceInfo"
  },
  "/PyTgCalls/Advanced Types/StreamEnded.xml": {
    "title": "StreamEnded",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "The audio stream or video stream has ended.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.StreamEnded",
      "properties": [
        {
          "name": "stream_type",
          "type": "StreamEnded.Type",
          "description": "Get the type of the stream that has ended.",
          "source_config": null,
          "value": null
        },
        {
          "name": "device",
          "type": "pytgcalls.Device",
          "description": "Get the device that has ended the stream.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/StreamEnded"
  },
  "/PyTgCalls/Advanced Types/StreamFrames.xml": {
    "title": "StreamFrames",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "Represents stream frames.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.StreamFrames",
      "properties": [
        {
          "name": "device",
          "type": "Device",
          "description": "Kind of frames device.",
          "source_config": null,
          "value": null
        },
        {
          "name": "direction",
          "type": "Direction",
          "description": "Direction of the frames.",
          "source_config": null,
          "value": null
        },
        {
          "name": "frames",
          "type": "list[Frame]",
          "description": "List of frames.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/StreamFrames"
  },
  "/PyTgCalls/Advanced Types/UpdatedGroupCallParticipant.xml": {
    "title": "UpdatedGroupCallParticipant",
    "lib": "PyTgCalls",
    "kind": "type",
    "description": "A participant changed his status.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.UpdatedGroupCallParticipant",
      "properties": [
        {
          "name": "action",
          "type": "pytgcalls.GroupCallParticipant.Action",
          "description": "Current action of the participant. participant -> pytgcalls.GroupCallParticipant\nInfo about a group call participant.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Advanced Types/UpdatedGroupCallParticipant"
  },
  "/PyTgCalls/Available Enums/AudioQuality.xml": {
    "title": "AudioQuality",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration of audio quality settings for audio streams in telegram calls.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.AudioQuality",
      "members": [
        {
          "name": "STUDIO",
          "type": null,
          "description": "Represents studio-quality audio with a bitrate of 96000 and 2 channels.",
          "source_config": null,
          "value": "(96000, 2)"
        },
        {
          "name": "HIGH",
          "type": null,
          "description": "Represents high-quality audio with a bitrate of 48000 and 2 channels.",
          "source_config": null,
          "value": "(48000, 2)"
        },
        {
          "name": "MEDIUM",
          "type": null,
          "description": "Represents medium-quality audio with a bitrate of 36000 and 1 channel.",
          "source_config": null,
          "value": "(36000, 1)"
        },
        {
          "name": "LOW",
          "type": null,
          "description": "Represents low-quality audio with a bitrate of 24000 and 1 channel.",
          "source_config": null,
          "value": "(24000, 1)"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/AudioQuality"
  },
  "/PyTgCalls/Available Enums/Call Status.xml": {
    "title": "Call Status",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration for managing call statuses.",
    "example": {},
    "details": {
      "signature": "class Call.Status",
      "members": [
        {
          "name": "ACTIVE",
          "type": null,
          "description": "Indicates that the call is playing.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "PAUSED",
          "type": null,
          "description": "Indicates that the call is paused.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "IDLE",
          "type": null,
          "description": "Indicates that the call is idle.",
          "source_config": null,
          "value": "4"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/Call Status"
  },
  "/PyTgCalls/Available Enums/Call Type.xml": {
    "title": "Call Type",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration for managing call types.",
    "example": {},
    "details": {
      "signature": "class Call.Type",
      "members": [
        {
          "name": "GROUP",
          "type": null,
          "description": "Group call type.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "PRIVATE",
          "type": null,
          "description": "Private call type.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/Call Type"
  },
  "/PyTgCalls/Available Enums/ChatUpdate Status.xml": {
    "title": "ChatUpdate Status",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration for managing chat update status in telegram calls.",
    "example": {},
    "details": {
      "signature": "class ChatUpdate.Status",
      "members": [
        {
          "name": "KICKED",
          "type": null,
          "description": "Indicates that you was kicked from the chat.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "LEFT_GROUP",
          "type": null,
          "description": "Indicates that you left the chat.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "CLOSED_VOICE_CHAT",
          "type": null,
          "description": "Indicates that the voice chat was closed.",
          "source_config": null,
          "value": "4"
        },
        {
          "name": "INVITED_VOICE_CHAT",
          "type": null,
          "description": "Indicates that you was invited to the voice chat.",
          "source_config": null,
          "value": "8"
        },
        {
          "name": "DISCARDED_CALL",
          "type": null,
          "description": "Indicates that the call was discarded.",
          "source_config": null,
          "value": "16"
        },
        {
          "name": "INCOMING_CALL",
          "type": null,
          "description": "Indicates that an incoming call is available.",
          "source_config": null,
          "value": "32"
        },
        {
          "name": "BUSY_CALL",
          "type": null,
          "description": "Indicates that the receiver is busy with another call.",
          "source_config": null,
          "value": "64"
        },
        {
          "name": "LEFT_CALL",
          "type": null,
          "description": "Indicates that you left the call.",
          "source_config": null,
          "value": "KICKED | LEFT_GROUP | CLOSED_VOICE_CHAT | DISCARDED_CALL | BUSY_CALL"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/ChatUpdate Status"
  },
  "/PyTgCalls/Available Enums/Device.xml": {
    "title": "Device",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration of stream device values.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.Device",
      "members": [
        {
          "name": "MICROPHONE",
          "type": null,
          "description": "Input mode using a microphone source.",
          "source_config": null,
          "value": "0"
        },
        {
          "name": "SPEAKER",
          "type": null,
          "description": "Input mode using a speaker source.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "CAMERA",
          "type": null,
          "description": "Input mode using a camera source.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "SCREEN",
          "type": null,
          "description": "Input mode using a screen source.",
          "source_config": null,
          "value": "3"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/Device"
  },
  "/PyTgCalls/Available Enums/Direction.xml": {
    "title": "Direction",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Stream direction for the stream.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.Direction",
      "members": [
        {
          "name": "OUTGOING",
          "type": null,
          "description": "Direction for sending the stream.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "INCOMING",
          "type": null,
          "description": "Direction for receiving the stream.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/Direction"
  },
  "/PyTgCalls/Available Enums/ExternalMedia.xml": {
    "title": "ExternalMedia",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration for the kind of media that is being played externally.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.ExternalMedia",
      "members": [
        {
          "name": "AUDIO",
          "type": null,
          "description": "Indicates that the stream type is audio.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "VIDEO",
          "type": null,
          "description": "Indicates that the stream type is video.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/ExternalMedia"
  },
  "/PyTgCalls/Available Enums/GroupCallParticipant Action.xml": {
    "title": "GroupCallParticipant Action",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration of actions for group call participants.",
    "example": {},
    "details": {
      "signature": "class GroupCallParticipant.Action",
      "members": [
        {
          "name": "JOINED",
          "type": null,
          "description": "Represents a participant joined in a group call.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "LEFT",
          "type": null,
          "description": "Represents a participant left a group call.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "KICKED",
          "type": null,
          "description": "Represents a participant kicked from a group call, usually when it joins from a different device while already in the call.",
          "source_config": null,
          "value": "4"
        },
        {
          "name": "UPDATED",
          "type": null,
          "description": "Represents a participant updated in a group call.",
          "source_config": null,
          "value": "8"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/GroupCallParticipant Action"
  },
  "/PyTgCalls/Available Enums/MediaStream Flags.xml": {
    "title": "MediaStream Flags",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration for managing media stream requirements in telegram calls.",
    "example": {},
    "details": {
      "signature": "class MediaStream.Flags",
      "members": [
        {
          "name": "AUTO_DETECT",
          "type": null,
          "description": "Automatically detects the presence of the stream.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "IGNORE",
          "type": null,
          "description": "Ignores the stream.",
          "source_config": null,
          "value": "2"
        },
        {
          "name": "REQUIRED",
          "type": null,
          "description": "Indicates that the stream is mandatory.",
          "source_config": null,
          "value": "4"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/MediaStream Flags"
  },
  "/PyTgCalls/Available Enums/StreamEnded Type.xml": {
    "title": "StreamEnded Type",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration for managing the type of stream that has ended.",
    "example": {},
    "details": {
      "signature": "class StreamEnded.Type",
      "members": [
        {
          "name": "AUDIO",
          "type": null,
          "description": "Indicates that the stream type is audio.",
          "source_config": null,
          "value": "1"
        },
        {
          "name": "VIDEO",
          "type": null,
          "description": "Indicates that the stream type is video.",
          "source_config": null,
          "value": "2"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/StreamEnded Type"
  },
  "/PyTgCalls/Available Enums/VideoQuality.xml": {
    "title": "VideoQuality",
    "lib": "PyTgCalls",
    "kind": "enum",
    "description": "Enumeration of video quality settings for video streams in telegram calls.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.VideoQuality",
      "members": [
        {
          "name": "UHD_4K",
          "type": null,
          "description": "Represents ultra-high-definition 4K video with a resolution of 3840x2160 and 60 FPS.",
          "source_config": null,
          "value": "(3840, 2160, 60)"
        },
        {
          "name": "QHD_2K",
          "type": null,
          "description": "Represents quad high-definition 2K video with a resolution of 2560x1440 and 60 FPS.",
          "source_config": null,
          "value": "(2560, 1440, 60)"
        },
        {
          "name": "FHD_1080p",
          "type": null,
          "description": "Represents full high-definition 1080p video with a resolution of 1920x1080 and 60 FPS.",
          "source_config": null,
          "value": "(1920, 1080, 60)"
        },
        {
          "name": "HD_720p",
          "type": null,
          "description": "Represents high-definition 720p video with a resolution of 1280x720 and 30 FPS.",
          "source_config": null,
          "value": "(1280, 720, 30)"
        },
        {
          "name": "SD_480p",
          "type": null,
          "description": "Represents standard-definition 480p video with a resolution of 854x480 and 30 FPS.",
          "source_config": null,
          "value": "(854, 480, 30)"
        },
        {
          "name": "SD_360p",
          "type": null,
          "description": "Represents standard-definition 360p video with a resolution of 640x360 and 30 FPS.",
          "source_config": null,
          "value": "(640, 360, 30)"
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Available Enums/VideoQuality"
  },
  "/PyTgCalls/Basic Methods/Idle.xml": {
    "title": "Idle",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This function will run indefinitely in order to block the main script execution and prevent it from exiting while having client(s) that are still running in the background. PyTgCalls works by keeping your handlers in a pool of worker threads, which run concurrently outside the main thread. Calling idle() will ensure that the client(s) remain active, by preventing the main script from ending until you decide to quit. Once a signal is received (e.g.: from CTRL+C) the function will terminate and your main script will continue.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp1 = PyTgCalls(client1)\napp2 = PyTgCalls(client2)\napp3 = PyTgCalls(client3)\n\n...  # Set handlers up\n\napp1.start()\napp2.start()\napp3.start()\n\nidle()"
    },
    "details": {
      "signature": "pytgcalls.idle()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Basic Methods/Idle"
  },
  "/PyTgCalls/Basic Methods/Leave Call.xml": {
    "title": "Leave Call",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows leaving and stopping a group call or a private call, or declining a private call.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.leave_call(\n    -1001185324811,\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            },
            {
              "name": "close",
              "type": "bool",
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method.\nexception pytgcalls.exceptions.NotInCallError\nThis error occurs when attempting to execute an action on a call that you have not joined.\nexception pytgcalls.exceptions.NoActiveGroupCall\nYou cannot edit a group call that hasn't been initiated.",
              "source_config": "CONNECTION_EXCEPTIONS",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.leave_call()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Basic Methods/Leave Call"
  },
  "/PyTgCalls/Basic Methods/Run.xml": {
    "title": "Run",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This is a convenience method that calls",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\napp = Client(client)\n\n...  # Call API decorators / MtProto decorators\n\napp.run()"
    },
    "details": {
      "sections": [
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.PyTgCallsAlreadyRunning\nThis error occurs when attempting to start a client that is already running.",
              "source_config": "RUNNING_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.run()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Basic Methods/Run"
  },
  "/PyTgCalls/Basic Methods/Start.xml": {
    "title": "Start",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method start and then initialize NTgCalls core.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\napp = Client(client)\n\n...  # Call API decorators / MTProto decorators\n\napp.start()"
    },
    "details": {
      "sections": [
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.PyTgCallsAlreadyRunning\nThis error occurs when attempting to start a client that is already running.",
              "source_config": "RUNNING_EXCEPTION",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.start()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Basic Methods/Start"
  },
  "/PyTgCalls/Calling Methods.xml": {
    "title": "Calling Methods",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "At this point, we have successfully",
    "example": {
      "language": "python",
      "code": "from pytgcalls import PyTgCalls\nfrom pytgcalls import idle\n...\napi_id = 12345\napi_hash = '0123456789abcdef0123456789abcdef'\n...\napp = PyTgCalls(client)\napp.start()\napp.play(\n    -1001185324811,\n    'http://docs.evostream.com/sample_content/assets/sintel1m720p.mp4',\n)\nidle()"
    },
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Calling Methods"
  },
  "/PyTgCalls/Changelogs.xml": {
    "title": "Changelogs",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "Bug Fixes: Addressed various bugs for a more stable experience. Now the The repository Now the Some media management methods were renamed, for example, for example To retrieve the current call status, use the Now the Removed Bug Fixes: Addressed various bugs for a more stable experience. Bug Fixes: Addressed various bugs for a more stable experience. Now methods like Now all listeners like Reworked Removed Removed all legacy types and input stream, now is a mandatory to use Now Removed Renamed Moved Now Renamed For more info about breaking changes, check the We're pleased to announce that now is available an unofficial porting of NTgCalls for Rust, for more info, check the Bug Fixes: Addressed various bugs for a more stable experience. Now all raw methods like AudioParameters, VideoParameters, AudioStream, VideoStream, and Stream are all under The exception class We're pleased to announce that pre-compiled wheels optimized for ARM64 devices are now available. Encourage upvotes by reposting this message in your channels. The bot with the highest upvotes earns a prestigious place in the PyTgCalls documentation. Make sure your repository goes beyond minor tweaks of a fork. Use the Your repository should be public. Join the contest now and showcase your PyTgCalls-powered bot for a chance to be featured prominently on the PyTgCalls documentation! Good luck! Bug Fixes: Addressed various bugs for a more stable experience. As we said in the last post, now PyTgCalls AudioImagePiped AudioPiped AudioVideoPiped CaptureAudioDevice CaptureAVDesktop CaptureAVDeviceDesktop CaptureVideoDesktop VideoPiped Bug Fixes: Addressed various bugs for a more stable experience. As we know, Google is in charge of financing Python. Due to the recent events with the Bug Fixes: Addressed various bugs for a more stable experience. Bug Fixes: Addressed various bugs for a more stable experience.",
    "example": {},
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "The repository",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "We're pleased to announce that now is available an unofficial porting of NTgCalls for Rust, for more info, check the",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "We're pleased to announce that pre-compiled wheels optimized for ARM64 devices are now available.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Join the contest now and showcase your PyTgCalls-powered bot for a chance to be featured prominently on the PyTgCalls documentation! Good luck!",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "As we said in the last post,\n                now PyTgCalls",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": " ",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "As we know, Google is in charge of financing Python.\n                Due to the recent events with the",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Changelogs"
  },
  "/PyTgCalls/Client.xml": {
    "title": "PyTgCalls Client",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "You now are in the API Reference section. Here you can find detailed information about PyTgCalls API: the main Client class, all available methods, types, attributes and decorators detailed descriptions can be found starting from this page. This page is about the Client class, which exposes high-level methods for easy access to the API. PyTgCalls Client, the main tool for interacting with Telegram Calls. Pass the MTProto Client Cache duration of a Full Chat query Get a list of all calls. Get all group calls Get all private calls pyrogram.InputPeer telethon.InputPeer hydrogram.InputPeer Get current Telegram user Ping of NTgCalls core Get the MTProto client Get the CPU usage of the current process You set an invalid MTProto client.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import PyTgCalls\n\napp = PyTgCalls(client)\napp.start()"
    },
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "PyTgCalls Client, the main tool for interacting with Telegram Calls.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "app",
              "type": "Union[pyrogram.Client, telethon.TelegramClient, hydrogram.Client]",
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "cache_duration",
              "type": "int",
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "STATIC METHODS",
          "items": [
            {
              "name": "async calls -> dict[str, Call]",
              "type": null,
              "description": " Get a list of all calls.",
              "source_config": null,
              "value": null
            },
            {
              "name": "async group_calls -> dict[str, Call]",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "async private_calls -> dict[str, Call]",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "cache_peer ->",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "ping -> int",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "mtproto_client -> Any",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "async cpu_usage -> float",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "exception pytgcalls.exceptions.InvalidMTProtoClient",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Client"
  },
  "/PyTgCalls/Custom Api.xml": {
    "title": "Custom API",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "You now are in the API Reference section where you can find detailed information about the Custom API: the Front-end API class, all available methods, types, attributes and decorators detailed descriptions can be found starting from this page. This page is about the CustomAPI class, which exposes high-level methods for easy access to the API. CustomApi, the main means host the local http api server. CustomApi port of the http server This method starts the internal http webserver, this is helpful if you need an API interface to PyTgCalls.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import CustomApi\n\napi = CustomApi()\n\n@api.on_update_custom_api()\nasync def custom_api_request(request: dict):\n    print(request)\n    return {\n        'response': 'FOXES',\n    }\napi.start()"
    },
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "CustomApi, the main means host the local http api server.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "port",
              "type": "int",
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "METHODS",
          "items": [
            {
              "name": "start()",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Custom Api"
  },
  "/PyTgCalls/Decorators.xml": {
    "title": "Decorators",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "While still being methods bound to the Decorator for handling all incoming updates. When any update is received, this decorator will be triggered. Decorator for handling incoming HTTP events. You have set too many decorators.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import PyTgCalls\nfrom pytgcalls.types import Update\nfrom pytgcalls import filters as call_filters\n...\nclient = # Here Your MTProto Client\napp = PyTgCalls(client)\n\n@app.on_update(call_filters.stream_end())\nasync def handler(client: PyTgCalls, update: Update):\n    print(update)\n\napp.run()"
    },
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Decorator for handling all incoming updates.\n                When any update is received, this decorator will be triggered.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": "@CustomApi.on_update_custom_api()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Decorators"
  },
  "/PyTgCalls/Examples.xml": {
    "title": "Examples",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "This page contains example scripts to demonstrate how PyTgCalls looks like. Every script is working right away (assuming you correctly set up your credentials), meaning you can simply copy-paste them and run. The only things you have to modify are session names and target chats, where applicable. The examples listed below can be treated as building blocks for your own applications and are designed to be simple enough to give you a basic idea.",
    "example": {},
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Examples"
  },
  "/PyTgCalls/Filters.xml": {
    "title": "Filters",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "Filters are objects that can be used to filter the content of incoming updates. Easily create a custom filter. Custom filters give you extra control over which updates are allowed or not to be processed by your handlers. A function that accepts three positional arguments (filter, client, update) and returns a boolean: True if the update should be handled, False otherwise. The filter argument refers to the filter itself and can be used to access keyword arguments (read below). The client argument refers to the Client that received the update. The update argument type will vary depending on which Your filter’s name. Can be anything you like. Defaults to \"CustomFilter\". Any additional keyword arguments you want to pass to your filter function. Filter updates for yourself. Filter updates for when a stream ends. Pass one or more stream type to filter stream end updates. Pass one or more devices to filter stream end updates. Filter updates coming from one or more chats. You can use Pass one or more chat ids/usernames to filter chats. Defaults to None (no chats). Filter specific type of chat updates. Pass one or more flags to filter chat updates. Filter updates for when a call participant joins, leaves or is updated. Pass one or more flags to filter call participant updates. Filter updates for when stream frames are received. Pass one or more directions to filter stream frames. Pass one or more devices to filter stream frames.",
    "example": {},
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "Easily create a custom filter.\n\n                Custom filters give you extra control over which updates are allowed or not to be processed by your handlers. Filter updates for yourself. Filter updates for when a stream ends. Filter updates coming from one or more chats.\n                You can use Filter specific type of chat updates. Filter updates for when a call participant joins, leaves or is updated. Filter updates for when stream frames are received.",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Filters"
  },
  "/PyTgCalls/Handling Updates.xml": {
    "title": "Handling Updates",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "Calling API methods sequentially is cool, but what if, for example, the list of participants changes? This page covers updates and how to handle such events in PyTgCalls. Let’s have a look at how they work. First of all, let's define what these updates are. As hinted earlier, updates are events that happen in PyTgCalls, such as joining a group call, changes in the participant list, stream ended etc. They are meant to notify you about a new specific state change. These updates are handled by registering one or more callback functions in your app using To explain how handlers work, let's examine the one that will be in charge of handling The most elegant way to register a stream end handler is by using the The defined The",
    "example": {
      "language": "python",
      "code": "from pytgcalls import PyTgCalls, filters\nfrom pytgcalls.types import Update\nfrom pytgcalls.types import MediaStream\n...\napp = PyTgCalls(client)\n\n@app.on_update(filters.stream_end())\nasync def my_handler(client: PyTgCalls, update: Update):\n    if isinstance(update, StreamVideoEnded):\n        await pytgcalls.play(\n            -1001185324811,\n            'http://docs.evostream.com/sample_content/assets/sintel1m720p.mp4',\n        )\n\napp.run()"
    },
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Handling Updates"
  },
  "/PyTgCalls/Install Guide.xml": {
    "title": "Install Guide",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "Being a modern Python library, The easiest way to install and upgrade PyTgCalls to its latest stable version is by using pip: PyTgCalls is always evolving: although new releases on PyPI are only published when a significant number of changes are added, this doesn’t mean you can’t try new features right now! In case you’d like to try out the latest PyTgCalls’ features, the To verify that PyTgCalls is correctly installed, open a Python shell and import it. If no errors show up you are good to go.",
    "example": {
      "language": "bash",
      "code": "$ pip3 install -U py-tgcalls"
    },
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Install Guide"
  },
  "/PyTgCalls/Media Devices.xml": {
    "title": "Media Devices",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "This class offers methods to access information regarding media devices available on your system. This functionality proves valuable when you intend to stream content from either your screen or microphone. MediaDevices, the main tool for retrieving media devices list. Retrieve a list of available microphone devices Retrieve a list of available speaker devices Retrieve a list of available camera devices Retrieve a list of available screen devices",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\nfrom pytgcalls import MediaDevices\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.play(\n    -1001185324811,\n    MediaDevices.get_audio_devices()[0],\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "MediaDevices, the main tool for retrieving media devices list.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "METHODS",
          "items": [
            {
              "name": "microphone_devices() -> list[pytgcalls.InputDevice]",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "speaker_devices() -> list[pytgcalls.SpeakerDevice]",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "camera_devices() -> list[pytgcalls.InputDevice]",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "screen_devices() -> list[pytgcalls.ScreenDevice]",
              "type": null,
              "description": "",
              "source_config": null,
              "value": null
            }
          ]
        }
      ],
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Media Devices"
  },
  "/PyTgCalls/Quick Start.xml": {
    "title": "Quick Start",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "The next few steps serve as a quick start for all new Pythoneers that want to see PyTgCalls in action as quickly as possible. Let’s go! That was just a brief overview that barely scratched the surface! In the following few pages of the introduction, we’ll have a much more in-depth look at what we have just done. Are you feeling eager to continue? You can take a shortcut to Call Methods and return later to learn more details.",
    "example": {},
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Quick Start"
  },
  "/PyTgCalls/Stream Descriptors/AudioParameters.xml": {
    "title": "AudioParameters",
    "lib": "PyTgCalls",
    "kind": "descriptor",
    "description": "Stream’s Audio Configuration",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.raw.AudioParameters",
      "parameters": [
        {
          "name": "bitrate",
          "type": "int",
          "description": "Audio sample rate (0-96000, max allowed by PCM16L).",
          "source_config": null,
          "value": null
        },
        {
          "name": "channels",
          "type": "int",
          "description": "Audio channel count (1-2, max allowed by PCM16L).",
          "source_config": null,
          "value": null
        },
        {
          "name": "from_quality(quality",
          "type": "AudioQuality)",
          "description": "This method was deprecated on PyTgCalls 1.2.X, use directly AudioQuality in MediaStream instead Create an AudioParameters instance from an AudioQuality enumeration.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Descriptors/AudioParameters"
  },
  "/PyTgCalls/Stream Descriptors/AudioStream.xml": {
    "title": "AudioStream",
    "lib": "PyTgCalls",
    "kind": "descriptor",
    "description": "The raw audio stream (PCM16L) descriptor",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.raw.AudioStream",
      "parameters": [
        {
          "name": "path",
          "type": "str",
          "description": "The audio file path or shell command (PCM16L format only).",
          "source_config": null,
          "value": null
        },
        {
          "name": "parameters",
          "type": "pytgcalls.types.raw.AudioParameters",
          "description": "Stream’s audio parameters.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Descriptors/AudioStream"
  },
  "/PyTgCalls/Stream Descriptors/MediaStream.xml": {
    "title": "MediaStream",
    "lib": "PyTgCalls",
    "kind": "descriptor",
    "description": "The media stream piped descriptor.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.MediaStream",
      "parameters": [
        {
          "name": "media_path",
          "type": "Union[str, ScreenInfo, DeviceInfo]",
          "description": "The audio, video, image or media device path. audio_parameters: Optional[Union[pytgcalls.types.raw.AudioParameters, pytgcalls.types.AudioQuality]]\nStream’s audio parameters. video_parameters: Optional[Union[pytgcalls.types.raw.VideoParameters, pytgcalls.types.VideoQuality]]\nStream’s video parameters.",
          "source_config": null,
          "value": null
        },
        {
          "name": "audio_path",
          "type": "Optional[Union[str, Path, InputDevice, ExternalMedia]]",
          "description": "The audio or input audio device path.",
          "source_config": null,
          "value": null
        },
        {
          "name": "audio_flags",
          "type": "Optional[Flags]",
          "description": "Flag used to control the handling of the audio stream in the media. It allows the system to decide whether to automatically detect, ignore, or require the audio stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "video_flags",
          "type": "Optional[Flags]",
          "description": "Flag used to control the handling of the video stream in the media. It allows the system to decide whether to automatically detect, ignore, or require the video stream. headers: Optional[dict[str, str]]\nHTTP connection’s headers.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ffmpeg_parameters",
          "type": "Optional[str]",
          "description": "FFmpeg additional parameters.",
          "source_config": null,
          "value": null
        },
        {
          "name": "ytdlp_parameters",
          "type": "Optional[str]",
          "description": "yt-dlp additional parameters.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Descriptors/MediaStream"
  },
  "/PyTgCalls/Stream Descriptors/RecordStream.xml": {
    "title": "RecordStream",
    "lib": "PyTgCalls",
    "kind": "descriptor",
    "description": "The record stream piped descriptor.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.RecordStream",
      "parameters": [
        {
          "name": "audio",
          "type": "Optional[Union[bool, str, SpeakerDevice]]",
          "description": "The speaker device, audio file or if it should be sent as updates. audio_parameters: Optional[Union[pytgcalls.types.raw.AudioParameters, pytgcalls.types.AudioQuality]]\nStream’s audio parameters.",
          "source_config": null,
          "value": null
        },
        {
          "name": "camera",
          "type": "Optional[bool]",
          "description": "Whether to record the camera.",
          "source_config": null,
          "value": null
        },
        {
          "name": "screen",
          "type": "Optional[bool]",
          "description": "Whether to record the screen.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Descriptors/RecordStream"
  },
  "/PyTgCalls/Stream Descriptors/Stream.xml": {
    "title": "Stream",
    "lib": "PyTgCalls",
    "kind": "descriptor",
    "description": "Stream Descriptor.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.Stream",
      "parameters": [
        {
          "name": "microphone",
          "type": "Optional[pytgcalls.types.raw.AudioStream]",
          "description": "Microphone configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "speaker",
          "type": "Optional[pytgcalls.types.raw.AudioStream]",
          "description": "Speaker configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "camera",
          "type": "Optional[pytgcalls.types.raw.VideoStream]",
          "description": "Camera configuration for the stream.",
          "source_config": null,
          "value": null
        },
        {
          "name": "screen",
          "type": "Optional[pytgcalls.types.raw.VideoStream]",
          "description": "Screen configuration for the stream.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Descriptors/Stream"
  },
  "/PyTgCalls/Stream Descriptors/VideoParameters.xml": {
    "title": "VideoParameters",
    "lib": "PyTgCalls",
    "kind": "descriptor",
    "description": "Stream’s video parameters.",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.raw.VideoParameters",
      "parameters": [
        {
          "name": "frame_rate",
          "type": "int",
          "description": "Frames per second (FPS) for video playback.",
          "source_config": null,
          "value": null
        },
        {
          "name": "adjust_by_height",
          "type": "bool",
          "description": "Adjust the video resolution by height instead of width.",
          "source_config": null,
          "value": null
        },
        {
          "name": "from_quality(quality",
          "type": "VideoQuality)",
          "description": "This method was deprecated on PyTgCalls 1.2.X, use directly VideoQuality in MediaStream instead Create an VideoParameters instance from an VideoQuality enumeration.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Descriptors/VideoParameters"
  },
  "/PyTgCalls/Stream Descriptors/VideoStream.xml": {
    "title": "VideoStream",
    "lib": "PyTgCalls",
    "kind": "descriptor",
    "description": "The raw video stream (YUV420P) descriptor",
    "example": {},
    "details": {
      "signature": "class pytgcalls.types.raw.VideoStream",
      "parameters": [
        {
          "name": "path",
          "type": "str",
          "description": "The video file path or shell command (YUV420P format only).",
          "source_config": null,
          "value": null
        },
        {
          "name": "parameters",
          "type": "pytgcalls.types.raw.VideoParameters",
          "description": "Stream’s video parameters.",
          "source_config": null,
          "value": null
        }
      ]
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Descriptors/VideoStream"
  },
  "/PyTgCalls/Stream Methods/Mute.xml": {
    "title": "Mute",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows muting the userbot via MTProto APIs.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.mute(\n    -1001185324811,\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method.\nexception pytgcalls.exceptions.NotInCallError\nThis error occurs when attempting to execute an action on a call that you have not joined.",
              "source_config": "BASE_EXCEPTIONS",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.mute() -> bool"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Methods/Mute"
  },
  "/PyTgCalls/Stream Methods/Pause.xml": {
    "title": "Pause",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows pausing the streaming file.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.pause(\n    -1001185324811,\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method.\nexception pytgcalls.exceptions.NotInCallError\nThis error occurs when attempting to execute an action on a call that you have not joined.",
              "source_config": "BASE_EXCEPTIONS",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.pause() -> bool"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Methods/Pause"
  },
  "/PyTgCalls/Stream Methods/Play.xml": {
    "title": "Play",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows streaming audio or video to a group call or a private call.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.play(\n    -1001185324811,\n    'test.mp4',\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            },
            {
              "name": "stream",
              "type": "Optional[Union[Stream, MediaStream, InputDevice, Path, str]]",
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "config",
              "type": "Optional[Union[CallConfig, GroupCallConfig]]",
              "description": "Additional configuration for the call.",
              "source_config": "CALL_CONFIG_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method. exception pytgcalls.exceptions.NoActiveGroupCall\nYou cannot edit a group call that hasn't been initiated. exception FileNotFoundError\nThe specified file does not exist.\nexception ntgcalls.FFmpegError\nTo use Piped input stream, make sure you have FFmpeg installed.\nexception ntgcalls.ShellError\nError while executing the shell script.\nexception pytgcalls.exceptions.NoAudioSourceFound\nThe audio file you're trying to play has no audio.\nexception pytgcalls.exceptions.NoVideoSourceFound\nThe video file you're trying to play has no video.\nexception pytgcalls.exceptions.InvalidVideoProportion\nPlaying a video with incorrect proportions is not supported.\nexception pytgcalls.exceptions.YtDlpError\nThis error occurs when yt-dlp encounters an error. exception pytgcalls.exceptions.CallDeclined\nThe call was declined by the user.\nexception pytgcalls.exceptions.CallBusy\nWhen the user is already in a call.\nexception pytgcalls.exceptions.CallDiscarded\nThe call was discarded by the user while connecting.\nexception ntgcalls.TelegramServerError\nThis error occurs when the connection between Telegram and the WebRTC service fails. exception ntgcalls.RTMPStreamingUnsupported\nYou need to use FFmpeg to stream to an RTMP stream.",
              "source_config": "BASE_MTPROTO",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.play()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Methods/Play"
  },
  "/PyTgCalls/Stream Methods/Record.xml": {
    "title": "Record",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows recording audio or video from a group call or a private call.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.record(\n    -1001185324811,\n    'record.mp3',\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            },
            {
              "name": "stream",
              "type": "Union[Stream, RecordStream, SpeakerDevice, Path, str]",
              "description": "",
              "source_config": null,
              "value": null
            },
            {
              "name": "config",
              "type": "Optional[Union[CallConfig, GroupCallConfig]]",
              "description": "Additional configuration for the call.",
              "source_config": "CALL_CONFIG_DESC",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method. exception pytgcalls.exceptions.NoActiveGroupCall\nYou cannot edit a group call that hasn't been initiated. exception ntgcalls.FFmpegError\nTo use Piped input stream, make sure you have FFmpeg installed. exception ntgcalls.ShellError\nError while executing the shell script. exception pytgcalls.exceptions.CallDeclined\nThe call was declined by the user.\nexception pytgcalls.exceptions.CallBusy\nWhen the user is already in a call.\nexception pytgcalls.exceptions.CallDiscarded\nThe call was discarded by the user while connecting.\nexception ntgcalls.TelegramServerError\nThis error occurs when the connection between Telegram and the WebRTC service fails.",
              "source_config": "BASE_MTPROTO",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.record()"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Methods/Record"
  },
  "/PyTgCalls/Stream Methods/Resume.xml": {
    "title": "Resume",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows resuming the streaming file.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.resume(\n    -1001185324811,\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method.\nexception pytgcalls.exceptions.NotInCallError\nThis error occurs when attempting to execute an action on a call that you have not joined.",
              "source_config": "BASE_EXCEPTIONS",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.resume() -> bool"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Methods/Resume"
  },
  "/PyTgCalls/Stream Methods/Time.xml": {
    "title": "Time",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows getting the played time of the stream.",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\nprint(\n    app.time(\n        -1001185324811,\n    )\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            },
            {
              "name": "direction -> Direction",
              "type": null,
              "description": " Stream direction for the stream.",
              "source_config": null,
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method.\nexception pytgcalls.exceptions.NotInCallError\nThis error occurs when attempting to execute an action on a call that you have not joined.",
              "source_config": "BASE_EXCEPTIONS",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.time() -> int"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Methods/Time"
  },
  "/PyTgCalls/Stream Methods/UnMute.xml": {
    "title": "UnMute",
    "lib": "PyTgCalls",
    "kind": "method",
    "description": "This method allows unmuting the userbot via MTProto APIs",
    "example": {
      "language": "python",
      "code": "from pytgcalls import Client\nfrom pytgcalls import idle\n...\n\napp = PyTgCalls(client)\napp.start()\n\n...  # Call API methods\n\napp.unmute(\n    -1001185324811,\n)\n\nidle()"
    },
    "details": {
      "sections": [
        {
          "title": "PARAMETERS",
          "items": [
            {
              "name": "chat_id",
              "type": "Union[int, str]",
              "description": "Can be direct id or a username",
              "source_config": "ARG_CHAT_ID",
              "value": null
            }
          ]
        },
        {
          "title": "RAISES",
          "items": [
            {
              "name": "",
              "type": null,
              "description": "exception pytgcalls.exceptions.NoMTProtoClient\nThis method can only be called with a valid MTProto client set.\nexception pytgcalls.exceptions.ClientNotStarted\nEnsure you have started the process with start() before calling this method.\nexception pytgcalls.exceptions.NotInCallError\nThis error occurs when attempting to execute an action on a call that you have not joined.",
              "source_config": "BASE_EXCEPTIONS",
              "value": null
            }
          ]
        }
      ],
      "signature": "PyTgCalls.unmute() -> bool"
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Stream Methods/UnMute"
  },
  "/PyTgCalls/Using Filters.xml": {
    "title": "Using Filters",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "So far we’ve seen Let’s start right away with a simple example: This example will show you how to only handle updates that are an Incoming Call and ignore any other update. Filters are passed as the first argument of the decorator: or, without decorators. Here filters are passed as the second argument of the add_handler function; the first is the callback function itself: Filters can be used in a more advanced way by inverting and combining more filters together using bitwise operators This example will show you how to only handle updates that are This example will show you how to only handle updates that are",
    "example": {},
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Using Filters"
  },
  "/PyTgCalls/Using Handlers.xml": {
    "title": "Using Handlers",
    "lib": "PyTgCalls",
    "kind": "misc",
    "description": "Handlers are used to instruct PyTgCalls to execute a specific function when a certain event occurs. For a much more convenient way to handle updates, you can use the To register a handler, you need to use the To remove a handler, you need to use the",
    "example": {
      "language": "python",
      "code": "from pytgcalls import PyTgCalls\nfrom pytgcalls.types import Update\nfrom pytgcalls import filters as call_filters\n...\n\nclient = # Here Your MTProto Client\napp = PyTgCalls(client)\n\nasync def handler(client: PyTgCalls, update: Update):\n    print(update)\n...\napp.add_handler(handler, call_filters.stream_end())\n..."
    },
    "details": {
      "signature": null
    },
    "doc_url": "https://pytgcalls.github.io/PyTgCalls/Using Handlers"
  }
}